{"version":2,"kind":"Notebook","sha256":"3447f83cea40b207df9fd01def86c52d63cf6a12bedf598001048331a371aec3","slug":"notebooks.pelicanfs","location":"/notebooks/01_pelicanfs.ipynb","dependencies":[],"frontmatter":{"title":"Using PelicanFS via FSSpec to Access Data on the OSDF","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Harsha R. Hampapura","given":"Harsha R.","family":"Hampapura"},"name":"Harsha R. Hampapura","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Brian Bockelman","given":"Brian","family":"Bockelman"},"name":"Brian Bockelman","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Alexander Hoelzeman","given":"Alexander","family":"Hoelzeman"},"name":"Alexander Hoelzeman","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Carrie Wall","given":"Carrie","family":"Wall"},"name":"Carrie Wall","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Emma Turetsky","given":"Emma","family":"Turetsky"},"name":"Emma Turetsky","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Amandha Wingert Barok","given":"Amandha Wingert","family":"Barok"},"name":"Amandha Wingert Barok","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Aashish Panta","given":"Aashish","family":"Panta"},"name":"Aashish Panta","id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Riley Conroy","given":"Riley","family":"Conroy"},"name":"Riley Conroy","id":"contributors-myst-generated-uid-7"},{"nameParsed":{"literal":"Douglas Schuster","given":"Douglas","family":"Schuster"},"name":"Douglas Schuster","id":"contributors-myst-generated-uid-8"},{"nameParsed":{"literal":"Justin Hiemstra","given":"Justin","family":"Hiemstra"},"name":"Justin Hiemstra","id":"contributors-myst-generated-uid-9"},{"nameParsed":{"literal":"Joanmarie Del Vecchio","given":"Joanmarie Del","family":"Vecchio"},"name":"Joanmarie Del Vecchio","id":"contributors-myst-generated-uid-10"},{"nameParsed":{"literal":"Kibiwott Koech","given":"Kibiwott","family":"Koech"},"name":"Kibiwott Koech","id":"contributors-myst-generated-uid-11"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/osdf-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"source_url":"https://github.com/projectpythia/osdf-cookbook/blob/main/notebooks/01_pelicanfs.ipynb","edit_url":"https://github.com/projectpythia/osdf-cookbook/edit/main/notebooks/01_pelicanfs.ipynb","exports":[{"format":"ipynb","filename":"01_pelicanfs.ipynb","url":"/osdf-cookbook/build/01_pelicanfs-2f5b2ccef632be1c6fe391ce8bf80a32.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OXX9GIiSZf"}],"key":"sdTLew0niP"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XIcuWVMWnt"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"lwfPPjCcDU"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Now that you’ve learned about the OSDF and the Pelican command line client, you may be wondering how you can easily access that data from within a notebook using python.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Lo8SHrzJwH"}],"key":"yrsv9yQrBx"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"You can do this using ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"kPnM2h1GRM"},{"type":"inlineCode","value":"PelicanFS","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"nAwzC6j3NR"},{"type":"text","value":", which is an ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Kpdi6PCUAt"},{"type":"inlineCode","value":"FSSPec","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"sHIsS53k3q"},{"type":"text","value":" implementation of the Pelican client.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"YNW5stojQe"}],"key":"tNlTALd0DP"},{"type":"heading","depth":3,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"This notebook will contain:","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"pJL0PHI8XC"}],"identifier":"this-notebook-will-contain","label":"This notebook will contain:","html_id":"this-notebook-will-contain","implicit":true,"key":"u9zlS7suSI"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":8,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"A brief explanation of FSSPec and PelicanFS","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"PzbYzwyDyc"}],"key":"vxpXxHVXsv"}],"key":"Yg60XCZNfh"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"A real-world example using FSSPec, Pelican, Xarray, and Zarr","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"p7GLhZSTH2"}],"key":"CoSfP0neRV"}],"key":"RxAGWXf1hO"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Other common access patterns","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"SKrX3WihiO"}],"key":"VUDjc2mUhV"}],"key":"beLqTTEqB1"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"FAQs","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"PQpzBJGlwt"}],"key":"Q0plU1xSt3"}],"key":"LV69fy2XVU"}],"key":"TuFLewkYmh"}],"key":"EDqNoUQCdx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eafVi5F6cl"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"cFCS81pkVy"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"To better understand this notebook, please familiarize yourself with the following concepts:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"G5q9Gs2u6S"}],"key":"Z6Z4uljJvY"},{"type":"table","position":{"start":{"line":5,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"T3vyDqKiUZ"}],"key":"cUEvAkC9jr"},{"type":"tableCell","header":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"PBzz4Nnogh"}],"key":"UHmMWltsM4"},{"type":"tableCell","header":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"WSRmjKGG1M"}],"key":"C3FZJ9ak4k"}],"key":"w50NudkbS4"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"http://projectpythia.org/osdf-cookbook/notebooks/osdf-intro/","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to OSDF","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"lf7N6f8Zks"}],"urlSource":"http://projectpythia.org/osdf-cookbook/notebooks/osdf-intro/","key":"y4hYHpYPNT"}],"key":"CHyU21VGAr"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"JknfYY1yVJ"}],"key":"VdLuxqbuGb"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[],"key":"CtQlTq4ffX"}],"key":"aHpuRKcMve"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/xarray/","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Understanding of Xarray","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"VuEDVVBZuu"}],"urlSource":"https://foundations.projectpythia.org/core/xarray/","key":"Ih8fnsww6a"}],"key":"GTNIz924Bw"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ywe1mqPw8m"}],"key":"cMppcMq6QK"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"To better understand the example workflow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"pBofkIGulh"}],"key":"lI054ytLbj"}],"key":"id1TLIIuv7"},{"type":"tableRow","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"https://filesystem-spec.readthedocs.io/en/latest/","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Overview of FSSpec","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"GIQ7kefRpX"}],"urlSource":"https://filesystem-spec.readthedocs.io/en/latest/","key":"XTI00K6Yvj"}],"key":"J2Fu6CLqva"},{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"aQZ3BbswXe"}],"key":"D7eId4j7uc"},{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"To better understand the FSSpec library","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"qEtZ4oAwJS"}],"key":"grnf3bGGKI"}],"key":"L19AKPvvhP"}],"key":"WGKKb1VQcf"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"paragraph","children":[{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"LtOgiyeqXv"}],"key":"jRFwlTmijt"},{"type":"text","value":": 20-30 minutes","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"NW0WosWblZ"}],"key":"DjAX4ANIak"}],"key":"eFmuRf6CLH"}],"key":"bTsNxk9QIY"}],"key":"tZrtjvi9sw"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qFbZgsn890"}],"key":"srA5OVldOT"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZEEfB3JD4b"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"ItIAYFys1Y"}],"key":"aBiwQyBwMB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import xarray as xr\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport metpy.calc as mpcalc\nfrom metpy.units import units\nimport fsspec\nimport intake","key":"AoYIAShm70"},{"type":"output","id":"rb3CIjz9f3syL3JMSHq50","data":[],"key":"JMK7uL76NG"}],"key":"oCdtx4YLPF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"What are PelicanFS and FSSPec?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"G7KDV0rI35"}],"identifier":"what-are-pelicanfs-and-fsspec","label":"What are PelicanFS and FSSPec?","html_id":"what-are-pelicanfs-and-fsspec","implicit":true,"key":"GEdPXXNGg4"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"First, let’s understand PelicanFS and how it integrates with FSSpec","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"h48eG29zG4"}],"key":"ddpTN3prDF"}],"key":"ds7lJ1Ynb6"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"FSSPec","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"t2u9sqeeB6"}],"identifier":"fsspec","label":"FSSPec","html_id":"fsspec","implicit":true,"key":"J35m28XEZJ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"FileSystem Spec (fsspec) is a python library which endeavors to provide a unified interface to many different storage backends. This includes, but is not limited to, POSIX, https, and S3. It’s used by various data processing libraries such as ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OgT3AQwpBn"},{"type":"inlineCode","value":"xarray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XsUSQRfqb4"},{"type":"text","value":", ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qQ79JHhMB3"},{"type":"inlineCode","value":"pandas","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hg8Ij9rFEB"},{"type":"text","value":", and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"B1XItjmlA1"},{"type":"inlineCode","value":"intake","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kd6OB4epY3"},{"type":"text","value":", just to name a few.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"m4sKKkaG2e"}],"key":"Zm0Zl3PWdS"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"To learn more about FSSPec, visit its ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"CDdMdrkhMz"},{"type":"link","url":"https://filesystem-spec.readthedocs.io/en/latest/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"information page","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"cSRcRtjfIr"}],"urlSource":"https://filesystem-spec.readthedocs.io/en/latest/","key":"Huy9pL3Ks7"},{"type":"text","value":".","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uiMgG9OT8e"}],"key":"RQ1XIYdJFZ"},{"type":"heading","depth":4,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Schemes","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"nD5yyza3pJ"}],"identifier":"schemes","label":"Schemes","html_id":"schemes","implicit":true,"key":"RqmaCNbZpC"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"FSSpec figures out how to interact with data from different storage backends through the scheme in the data path. For example, FSSpec knows to use the “Hyper Text Transfer Protocol” interface whenever it sees URLs with the ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"ugTKi0WJ1r"},{"type":"inlineCode","value":"https:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"EmBBZq7Xnh"},{"type":"text","value":" scheme. This lets users interact with data from a variety of storage technologies without forcing them to know how those technologies work under the hood.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"H3I09fE725"}],"key":"xtI8un0j90"},{"type":"heading","depth":3,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"PelicanFS","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"TRadd27fen"}],"identifier":"pelicanfs","label":"PelicanFS","html_id":"pelicanfs","implicit":true,"key":"Kkj0ljRN9h"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"PelicanFS is an implementation of FSSpec that introduces two new schemes to FSSpec: ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"HBmrr5pzNm"},{"type":"inlineCode","value":"pelican","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"uqG0edgkzc"},{"type":"text","value":" and ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"p3SVrMbpjA"},{"type":"inlineCode","value":"osdf","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"DmZ7lClDWD"},{"type":"text","value":". PelicanFS enables you to use the ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"OdUK6IWAzM"},{"type":"inlineCode","value":"pelican://","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"koxvNDigwe"},{"type":"text","value":" scheme to access data via Pelican Federations like the OSDF in any software that already understands FSSpec. To use it, you must specify the federation host name. A Pelican path looks like:","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"uaPyHiZrnI"}],"key":"a5tQp6mJ5Y"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"inlineCode","value":"pelican://<federation-host-name>/<namespace-path>","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"TrdVz8Eii2"}],"key":"HuBe9caHWF"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"Yub3dTlHfd"},{"type":"inlineCode","value":"osdf","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"fxZDJQhbWJ"},{"type":"text","value":" scheme is a specific instance of the ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"mRbgJBr80U"},{"type":"inlineCode","value":"pelican","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"Xur9BOgk4U"},{"type":"text","value":" scheme that knows how to access the OSDF. A path using the ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"QX5fJRnxza"},{"type":"inlineCode","value":"osdf","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"ZWgAuqw8X5"},{"type":"text","value":" scheme ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"mAp94k1uvl"},{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"should not","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"ULwVT6B1eF"}],"key":"XI5MikV6f8"},{"type":"text","value":" provide the federation root. An OSDF path looks like:","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"pkJLYdrmS4"}],"key":"zJcTQ37TsU"},{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"inlineCode","value":"osdf:///<namespace-path>","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"uIuKG913qF"}],"key":"pk8cXoSaRB"},{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"PelicanFS teaches FSSpec how to interact with the Pelican protocol using the above pelican:-schemed or osdf:-schemed URLs.","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"pUZxWrhyeR"}],"key":"fdtqqlBvqB"}],"key":"NAHnt9V1AZ"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"HKKS4DR2bm"}],"key":"sxC2g2VjHv"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Notice the three ‘/’ after “osdf:”. This is required for a properly-formed osdf path.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"p6vRt2ZVj7"}],"key":"m1nCjKbwue"}],"key":"MbfxO9nvCB"}],"key":"FobywUQNXi"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If you’d like to understand more about how pelican works, check out the documentation ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AqYkO28C9e"},{"type":"link","url":"https://docs.pelicanplatform.org/about-pelican/core-concepts","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vN7MIZY92n"}],"urlSource":"https://docs.pelicanplatform.org/about-pelican/core-concepts","key":"KlfoXvshpE"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Jx1oIv8k9O"}],"key":"rU9now0JRN"},{"type":"heading","depth":3,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Putting it all together","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TQe8XpJ8B1"}],"identifier":"putting-it-all-together","label":"Putting it all together","html_id":"putting-it-all-together","implicit":true,"key":"rY3UU9XIlC"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"What does this mean in practice?","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"N0IVwSd5py"}],"key":"udMvek58dn"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"If you want to access data from the OSDF using FSSpec or any library that uses FSSpec, build the osdf-schemed URL for the data and use that URL as your data path and then FSSpec and PelicanFS will do all the work to resolve it behind the scenes.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"RafXBwB1uD"}],"key":"B3Ulr9XMQa"}],"key":"bh8dneIRjC"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JcF8DxbPKY"}],"key":"jiZowXqt8G"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"A PelicanFS Example using Real Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hGeJe3dHBX"}],"identifier":"a-pelicanfs-example-using-real-data","label":"A PelicanFS Example using Real Data","html_id":"a-pelicanfs-example-using-real-data","implicit":true,"key":"mPnVORPUGG"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The following is an example that shows how PelicanFS works on real world data using FSSPec and Xarray to access Zarr data from AWS.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rah6ZyHXAp"}],"key":"KtR25yXcys"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"This portion of the notebook is based off of the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"JiLIhMsv1Q"},{"type":"link","url":"https://projectpythia.org/HRRR-AWS-cookbook/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Project Pythia HRRR AWS Cookbook","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mWc9zATPMV"}],"urlSource":"https://projectpythia.org/HRRR-AWS-cookbook/","key":"qPUQGdofOi"}],"key":"qmRXAjeg1U"}],"key":"MAEUPyhKKx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Setting the Proper Path","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WkEF22us3z"}],"identifier":"setting-the-proper-path","label":"Setting the Proper Path","html_id":"setting-the-proper-path","implicit":true,"key":"Kng0UITxv8"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The data for this tutorial is part of AWS Open Data, hosted in the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"dozYY6qWnG"},{"type":"inlineCode","value":"us-west-1","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"zGGU8y43zf"},{"type":"text","value":" region. The OSDF provides access to that region using the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"XjNGFp5IyS"},{"type":"inlineCode","value":"/aws-opendata/us-west-1","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"BqjKGb4IfB"},{"type":"text","value":" namespace.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"jGKgXYThAc"}],"key":"hLLgc6QbOk"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Let’s first create a path which uses the ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"YTnTC6F7P1"},{"type":"inlineCode","value":"osdf","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"H90tndmNlQ"},{"type":"text","value":" scheme.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"l8EwBvl1ey"}],"key":"CmgDRp9whR"}],"key":"IaobF2eY4Y"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Set the date, hour, variable, and level for the HRRR data\ndate = '20211016'\nhour = '21'\nvar = 'TMP'\nlevel = '2m_above_ground'\n\n# Construct object paths for the Zarr datasets using the osdf scheme\nnamespace_object1 = f'osdf:///aws-opendata/us-west-1/hrrrzarr/sfc/{date}/{date}_{hour}z_anl.zarr/{level}/{var}/{level}/'\nnamespace_object2 = f'osdf:///aws-opendata/us-west-1/hrrrzarr/sfc/{date}/{date}_{hour}z_anl.zarr/{level}/{var}/'","key":"Xr9KEV80Xi"},{"type":"output","id":"S2yc8DCitsAU9RX7wSw3F","data":[],"key":"SAV8jfxTnA"}],"key":"r6x4fhvPwr"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Using FSSpec to access the data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HERYU3IyQv"}],"identifier":"using-fsspec-to-access-the-data","label":"Using FSSpec to access the data","html_id":"using-fsspec-to-access-the-data","implicit":true,"key":"vOmpe8oaDI"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now we can access the data using XArray as usual. The two objects will be accessed using fsspec’s ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"My9iYucU4q"},{"type":"inlineCode","value":"get_mapper","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yjZGFN5uec"},{"type":"text","value":" function, which knows to use PelicanFS because we created the path using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"nTg44uYQLi"},{"type":"inlineCode","value":"osdf","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aoNf27qv2z"},{"type":"text","value":" scheme.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CU33kxSK9B"}],"key":"MrZGHMfZEV"}],"key":"KWeOKbmHOv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Get mappers for the Zarr datasets\n\nobject1 = fsspec.get_mapper(namespace_object1)\nobject2 = fsspec.get_mapper(namespace_object2)\n\n# Open the datasets\nds = xr.open_mfdataset([object1, object2], engine='zarr', decode_timedelta=True)\n\n# Display the dataset\nds","key":"UAtQmiKzuP"},{"type":"output","id":"V33aOrU6pzOPX8vS0PSRo","data":[{"output_type":"execute_result","execution_count":3,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 4MB\nDimensions:                  (projection_y_coordinate: 1059,\n                              projection_x_coordinate: 1799)\nCoordinates:\n  * projection_x_coordinate  (projection_x_coordinate) float64 14kB -2.698e+0...\n  * projection_y_coordinate  (projection_y_coordinate) float64 8kB -1.587e+06...\nData variables:\n    TMP                      (projection_y_coordinate, projection_x_coordinate) float16 4MB dask.array<chunksize=(150, 150), meta=np.ndarray>\n    forecast_period          timedelta64[ns] 8B ...\n    forecast_reference_time  datetime64[ns] 8B ...\n    height                   float64 8B ...\n    pressure                 float64 8B ...\n    time                     datetime64[ns] 8B ...","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"46dbcb7069e0fa33788beb51cbe7bd1d","path":"/osdf-cookbook/build/46dbcb7069e0fa33788beb51cbe7bd1d.html"}}}],"key":"IKZzXxi022"}],"key":"RKZbRSCbiG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Continue the workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ySXzld08jy"}],"identifier":"continue-the-workflow","label":"Continue the workflow","html_id":"continue-the-workflow","implicit":true,"key":"R4fUBmrDuv"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"As you can see, Xarray streamed the data correctly into the datasets. To prove the workflow works, the next cell continues the computation and generates two plots. This tutorial will not go in depth as to what this code is accomplishing.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"YO1TWdnNAf"}],"key":"S85fNJQI9I"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"If you’d like to know more about the following workflow, please refer to the ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"RuUyQzHJRV"},{"type":"link","url":"https://projectpythia.org/HRRR-AWS-cookbook/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Project Pythia HRRR AWS Cookbook","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"vIbt3dy37B"}],"urlSource":"https://projectpythia.org/HRRR-AWS-cookbook/","key":"jchfZCG7yf"}],"key":"d7WFQ7iNZF"}],"key":"iuzRu8m1HT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Define coordinates for projection\nlon1 = -97.5\nlat1 = 38.5\nslat = 38.5\n\n# Define the Lambert Conformal projection\nprojData = ccrs.LambertConformal(\n    central_longitude=lon1,\n    central_latitude=lat1,\n    standard_parallels=[slat, slat],\n    globe=ccrs.Globe(\n        semimajor_axis=6371229,\n        semiminor_axis=6371229\n    )\n)\n\n# Display dataset coordinates\nds.coords\n\n# Extract temperature data\nairTemp = ds.TMP\n\n# Display the temperature data\nairTemp\n\n# Convert temperature units to Celsius\nairTemp = airTemp.metpy.convert_units('degC')\n\n# Display the converted temperature data\nairTemp\n\n# Extract projection coordinates\nx = airTemp.projection_x_coordinate\ny = airTemp.projection_y_coordinate\n\n# Plot temperature data\nairTemp.plot(figsize=(11, 8.5))\n\n# Compute minimum and maximum temperatures\nminTemp = airTemp.min().compute()\nmaxTemp = airTemp.max().compute()\n\n# Display minimum and maximum temperature values\nminTemp.values, maxTemp.values\n\n# Define contour levels\nfint = np.arange(np.floor(minTemp.values), np.ceil(maxTemp.values) + 2, 2)\n\n# Define plot bounds and resolution\nlatN = 50.4\nlatS = 24.25\nlonW = -123.8\nlonE = -71.2\nres = '50m'\n\n# Create a figure and axis with projection\nfig = plt.figure(figsize=(18, 12))\nax = plt.subplot(1, 1, 1, projection=projData)\nax.set_extent([lonW, lonE, latS, latN], crs=ccrs.PlateCarree())\nax.add_feature(cfeature.COASTLINE.with_scale(res))\nax.add_feature(cfeature.STATES.with_scale(res))\n\n# Add the title\ntl1 = 'HRRR 2m temperature ($^\\\\circ$C)'\ntl2 = f'Analysis valid at: {hour}00 UTC {date}'\nplt.title(f'{tl1}\\n{tl2}', fontsize=16)\n\n# Contour fill\nCF = ax.contourf(x, y, airTemp, levels=fint, cmap=plt.get_cmap('coolwarm'))\n\n# Make a colorbar for the ContourSet returned by the contourf call\ncbar = fig.colorbar(CF, shrink=0.5)\ncbar.set_label(r'2m Temperature ($^\\circ$C)', size='large')\n\n# Show the plot\nplt.show()","key":"AnuXsmYyV7"},{"type":"output","id":"rGcMf42sFo40xTbuimVtE","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1100x850 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"210f7f65ea77250ecec49bdfe75b3037","path":"/osdf-cookbook/build/210f7f65ea77250ecec49bdfe75b3037.png"}}},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/cartopy/io/__init__.py:242: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_cultural/ne_50m_admin_1_states_provinces_lakes.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1800x1200 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"6446427238985c0494850f43d728bfbf","path":"/osdf-cookbook/build/6446427238985c0494850f43d728bfbf.png"}}}],"key":"Z9BxkYMgGS"}],"key":"zBeFXc6IYl"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CWP2IEbJKD"}],"key":"OLWsZ9LD05"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Other Ways to Access","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"g8GPYwqzgJ"}],"identifier":"other-ways-to-access","label":"Other Ways to Access","html_id":"other-ways-to-access","implicit":true,"key":"SZTme8Mlou"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"There are other common ways to access data and use data with FSSpec and PelicanFS. This section will will cover the following topics","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uGEZFUb6Zr"}],"key":"PIdCU6WiSY"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Using an Intake Catalog","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"PE0RxXtAg7"}],"key":"UnEhYTs60C"}],"key":"ObBN37hkno"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Directly Accessing Data","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"WYDUo6qyEM"}],"key":"UifpcgfPxC"}],"key":"bjlzH3EtRc"}],"key":"zXEcFzw2Ln"}],"key":"VTWo7pCsg8"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Intake Catalog","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J02D7ELm35"}],"identifier":"intake-catalog","label":"Intake Catalog","html_id":"intake-catalog","implicit":true,"key":"Gl2NR48x1F"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In order to use PelicanFS with an Intake catalog, the paths in the catalog itself need to use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lv5MINIkMK"},{"type":"inlineCode","value":"osdf","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"H7fACtkT3x"},{"type":"text","value":" or ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Pom1l0Bhtd"},{"type":"inlineCode","value":"pelican","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JRQit5ptLA"},{"type":"text","value":" schemes.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JnIOp6FMdr"}],"key":"dooBosVCKi"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Here’s an example using the catalog located at ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ZxrLjZERE5"},{"type":"link","url":"https://data.rda.ucar.edu/d850001/catalogs/osdf/cmip6-aws/cmip6-osdf-zarr.json","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"https://​data​.rda​.ucar​.edu​/d850001​/catalogs​/osdf​/cmip6​-aws​/cmip6​-osdf​-zarr​.json","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"JggScoZkfy"}],"urlSource":"https://data.rda.ucar.edu/d850001/catalogs/osdf/cmip6-aws/cmip6-osdf-zarr.json","key":"Q0M97d0LkY"}],"key":"l3gwB4QJAO"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"An entry in the catalog’s csv file looks like:","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"QKO0Vusq6s"}],"key":"M4T6UMzY2V"}],"key":"InRALSdwIB"},{"type":"block","kind":"notebook-content","children":[{"type":"code","lang":"","value":"HighResMIP,CMCC,CMCC-CM2-HR4,highresSST-present,r1i1p1f1,Amon,ta,gn,osdf:///aws-opendata/us-west-2/cmip6-pds/CMIP6/HighResMIP/CMCC/CMCC-CM2-HR4/highresSST-present/r1i1p1f1/Amon/ta/gn/v20170706/,,20170706","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"key":"H5AqUwYDZf"}],"key":"xOMupwO8Vl"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Notice how the path is using the ‘osdf’ scheme and the ‘/aws-opendata/us-west-2’ namespace. If all the paths in the csv file are formatted like this, then you can use the Intake catalog exactly as usual.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pLdJLDQgFw"}],"key":"a7SaN3rhc9"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here is a workflow and plot which uses an Intake catalog and the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qB1gIu8ddk"},{"type":"inlineCode","value":"osdf","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sUhBeMpLX2"},{"type":"text","value":" scheme. If you want to understand more about the underlying workflow, please look at the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UbHNyzvEPE"},{"type":"link","url":"http://projectpythia.org/osdf-cookbook/notebooks/cmip6-gmst/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Global Mean Surface Temperature Anomalies (GMSTA) from CMIP6 data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DxfidAmCk4"}],"urlSource":"http://projectpythia.org/osdf-cookbook/notebooks/cmip6-gmst/","key":"GkvPHdOFdm"},{"type":"text","value":" notebook.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"eCgcV7F9y5"}],"key":"bXbTmk2xEy"}],"key":"oadWTrygAO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"rda_url     =  'https://data.rda.ucar.edu/'\ncat_url     = rda_url +  'd850001/catalogs/osdf/cmip6-aws/cmip6-osdf-zarr.json'\n\ncol = intake.open_esm_datastore(cat_url)\n\nexpts = ['historical']\n\nquery = dict(\n    experiment_id=expts,\n    table_id='Amon',\n    variable_id=['tas'],\n    member_id = 'r1i1p1f1',\n    #activity_id = 'CMIP',\n)\n\ncol_subset = col.search(require_all_on=[\"source_id\"], **query)\n\nds = xr.open_zarr(col_subset.df['zstore'][0])\n\nds.tas.isel(time=0).plot()","key":"Q3lnYviHoY"},{"type":"output","id":"RWU1r5rFI0jeL59jlWsr4","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/intake_esm/__init__.py:6: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.\n  from pkg_resources import DistributionNotFound, get_distribution\n"},{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mClientResponseError\u001b[39m                       Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[5]\u001b[39m\u001b[32m, line 20\u001b[39m\n\u001b[32m     16\u001b[39m col_subset = col.search(require_all_on=[\u001b[33m\"\u001b[39m\u001b[33msource_id\u001b[39m\u001b[33m\"\u001b[39m], **query)\n\u001b[32m     18\u001b[39m ds = xr.open_zarr(col_subset.df[\u001b[33m'\u001b[39m\u001b[33mzstore\u001b[39m\u001b[33m'\u001b[39m][\u001b[32m0\u001b[39m])\n\u001b[32m---> \u001b[39m\u001b[32m20\u001b[39m \u001b[43mds\u001b[49m\u001b[43m.\u001b[49m\u001b[43mtas\u001b[49m\u001b[43m.\u001b[49m\u001b[43misel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtime\u001b[49m\u001b[43m=\u001b[49m\u001b[32;43m0\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mplot\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/plot/accessor.py:48\u001b[39m, in \u001b[36mDataArrayPlotAccessor.__call__\u001b[39m\u001b[34m(self, **kwargs)\u001b[39m\n\u001b[32m     46\u001b[39m \u001b[38;5;129m@functools\u001b[39m.wraps(dataarray_plot.plot, assigned=(\u001b[33m\"\u001b[39m\u001b[33m__doc__\u001b[39m\u001b[33m\"\u001b[39m, \u001b[33m\"\u001b[39m\u001b[33m__annotations__\u001b[39m\u001b[33m\"\u001b[39m))\n\u001b[32m     47\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, **kwargs) -> Any:\n\u001b[32m---> \u001b[39m\u001b[32m48\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mdataarray_plot\u001b[49m\u001b[43m.\u001b[49m\u001b[43mplot\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_da\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/plot/dataarray_plot.py:277\u001b[39m, in \u001b[36mplot\u001b[39m\u001b[34m(darray, row, col, col_wrap, ax, hue, subplot_kws, **kwargs)\u001b[39m\n\u001b[32m    226\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mplot\u001b[39m(\n\u001b[32m    227\u001b[39m     darray: DataArray,\n\u001b[32m    228\u001b[39m     *,\n\u001b[32m   (...)\u001b[39m\u001b[32m    235\u001b[39m     **kwargs: Any,\n\u001b[32m    236\u001b[39m ) -> Any:\n\u001b[32m    237\u001b[39m \u001b[38;5;250m    \u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m    238\u001b[39m \u001b[33;03m    Default plot of DataArray using :py:mod:`matplotlib:matplotlib.pyplot`.\u001b[39;00m\n\u001b[32m    239\u001b[39m \n\u001b[32m   (...)\u001b[39m\u001b[32m    273\u001b[39m \u001b[33;03m    xarray.DataArray.squeeze\u001b[39;00m\n\u001b[32m    274\u001b[39m \u001b[33;03m    \"\"\"\u001b[39;00m\n\u001b[32m    275\u001b[39m     darray = \u001b[43mdarray\u001b[49m\u001b[43m.\u001b[49m\u001b[43msqueeze\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    276\u001b[39m \u001b[43m        \u001b[49m\u001b[43md\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43md\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43ms\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mdarray\u001b[49m\u001b[43m.\u001b[49m\u001b[43msizes\u001b[49m\u001b[43m.\u001b[49m\u001b[43mitems\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43ms\u001b[49m\u001b[43m \u001b[49m\u001b[43m==\u001b[49m\u001b[43m \u001b[49m\u001b[32;43m1\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mand\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43md\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mrow\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcol\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mhue\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m--> \u001b[39m\u001b[32m277\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcompute\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    279\u001b[39m     plot_dims = \u001b[38;5;28mset\u001b[39m(darray.dims)\n\u001b[32m    280\u001b[39m     plot_dims.discard(row)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/core/dataarray.py:1241\u001b[39m, in \u001b[36mDataArray.compute\u001b[39m\u001b[34m(self, **kwargs)\u001b[39m\n\u001b[32m   1211\u001b[39m \u001b[38;5;250m\u001b[39m\u001b[33;03m\"\"\"Trigger loading data into memory and return a new dataarray.\u001b[39;00m\n\u001b[32m   1212\u001b[39m \n\u001b[32m   1213\u001b[39m \u001b[33;03mData will be computed and/or loaded from disk or a remote source.\u001b[39;00m\n\u001b[32m   (...)\u001b[39m\u001b[32m   1238\u001b[39m \u001b[33;03mVariable.compute\u001b[39;00m\n\u001b[32m   1239\u001b[39m \u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m   1240\u001b[39m new = \u001b[38;5;28mself\u001b[39m.copy(deep=\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[32m-> \u001b[39m\u001b[32m1241\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mnew\u001b[49m\u001b[43m.\u001b[49m\u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/core/dataarray.py:1167\u001b[39m, in \u001b[36mDataArray.load\u001b[39m\u001b[34m(self, **kwargs)\u001b[39m\n\u001b[32m   1137\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mload\u001b[39m(\u001b[38;5;28mself\u001b[39m, **kwargs) -> Self:\n\u001b[32m   1138\u001b[39m \u001b[38;5;250m    \u001b[39m\u001b[33;03m\"\"\"Trigger loading data into memory and return this dataarray.\u001b[39;00m\n\u001b[32m   1139\u001b[39m \n\u001b[32m   1140\u001b[39m \u001b[33;03m    Data will be computed and/or loaded from disk or a remote source.\u001b[39;00m\n\u001b[32m   (...)\u001b[39m\u001b[32m   1165\u001b[39m \u001b[33;03m    Variable.load\u001b[39;00m\n\u001b[32m   1166\u001b[39m \u001b[33;03m    \"\"\"\u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m1167\u001b[39m     ds = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_to_temp_dataset\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1168\u001b[39m     new = \u001b[38;5;28mself\u001b[39m._from_temp_dataset(ds)\n\u001b[32m   1169\u001b[39m     \u001b[38;5;28mself\u001b[39m._variable = new._variable\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/core/dataset.py:556\u001b[39m, in \u001b[36mDataset.load\u001b[39m\u001b[34m(self, **kwargs)\u001b[39m\n\u001b[32m    553\u001b[39m chunkmanager = get_chunked_array_type(*chunked_data.values())\n\u001b[32m    555\u001b[39m \u001b[38;5;66;03m# evaluate all the chunked arrays simultaneously\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m556\u001b[39m evaluated_data: \u001b[38;5;28mtuple\u001b[39m[np.ndarray[Any, Any], ...] = \u001b[43mchunkmanager\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcompute\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    557\u001b[39m \u001b[43m    \u001b[49m\u001b[43m*\u001b[49m\u001b[43mchunked_data\u001b[49m\u001b[43m.\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\n\u001b[32m    558\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    560\u001b[39m \u001b[38;5;28;01mfor\u001b[39;00m k, data \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(chunked_data, evaluated_data, strict=\u001b[38;5;28;01mFalse\u001b[39;00m):\n\u001b[32m    561\u001b[39m     \u001b[38;5;28mself\u001b[39m.variables[k].data = data\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/namedarray/daskmanager.py:85\u001b[39m, in \u001b[36mDaskManager.compute\u001b[39m\u001b[34m(self, *data, **kwargs)\u001b[39m\n\u001b[32m     80\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mcompute\u001b[39m(\n\u001b[32m     81\u001b[39m     \u001b[38;5;28mself\u001b[39m, *data: Any, **kwargs: Any\n\u001b[32m     82\u001b[39m ) -> \u001b[38;5;28mtuple\u001b[39m[np.ndarray[Any, _DType_co], ...]:\n\u001b[32m     83\u001b[39m     \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mdask\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01marray\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m compute\n\u001b[32m---> \u001b[39m\u001b[32m85\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mcompute\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/dask/base.py:681\u001b[39m, in \u001b[36mcompute\u001b[39m\u001b[34m(traverse, optimize_graph, scheduler, get, *args, **kwargs)\u001b[39m\n\u001b[32m    678\u001b[39m     expr = expr.optimize()\n\u001b[32m    679\u001b[39m     keys = \u001b[38;5;28mlist\u001b[39m(flatten(expr.__dask_keys__()))\n\u001b[32m--> \u001b[39m\u001b[32m681\u001b[39m     results = \u001b[43mschedule\u001b[49m\u001b[43m(\u001b[49m\u001b[43mexpr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkeys\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    683\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m repack(results)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/core/indexing.py:659\u001b[39m, in \u001b[36mImplicitToExplicitIndexingAdapter.__array__\u001b[39m\u001b[34m(self, dtype, copy)\u001b[39m\n\u001b[32m    655\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m__array__\u001b[39m(\n\u001b[32m    656\u001b[39m     \u001b[38;5;28mself\u001b[39m, dtype: np.typing.DTypeLike = \u001b[38;5;28;01mNone\u001b[39;00m, /, *, copy: \u001b[38;5;28mbool\u001b[39m | \u001b[38;5;28;01mNone\u001b[39;00m = \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[32m    657\u001b[39m ) -> np.ndarray:\n\u001b[32m    658\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m Version(np.__version__) >= Version(\u001b[33m\"\u001b[39m\u001b[33m2.0.0\u001b[39m\u001b[33m\"\u001b[39m):\n\u001b[32m--> \u001b[39m\u001b[32m659\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m np.asarray(\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mget_duck_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m, dtype=dtype, copy=copy)\n\u001b[32m    660\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    661\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m np.asarray(\u001b[38;5;28mself\u001b[39m.get_duck_array(), dtype=dtype)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/core/indexing.py:664\u001b[39m, in \u001b[36mImplicitToExplicitIndexingAdapter.get_duck_array\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    663\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mget_duck_array\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[32m--> \u001b[39m\u001b[32m664\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43marray\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_duck_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/core/indexing.py:897\u001b[39m, in \u001b[36mCopyOnWriteArray.get_duck_array\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    896\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mget_duck_array\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[32m--> \u001b[39m\u001b[32m897\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43marray\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_duck_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/coding/common.py:80\u001b[39m, in \u001b[36m_ElementwiseFunctionArray.get_duck_array\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m     79\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mget_duck_array\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[32m---> \u001b[39m\u001b[32m80\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m.func(\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43marray\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget_duck_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/core/indexing.py:737\u001b[39m, in \u001b[36mLazilyIndexedArray.get_duck_array\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    734\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mxarray\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mbackends\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mcommon\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m BackendArray\n\u001b[32m    736\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(\u001b[38;5;28mself\u001b[39m.array, BackendArray):\n\u001b[32m--> \u001b[39m\u001b[32m737\u001b[39m     array = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43marray\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m]\u001b[49m\n\u001b[32m    738\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    739\u001b[39m     array = apply_indexer(\u001b[38;5;28mself\u001b[39m.array, \u001b[38;5;28mself\u001b[39m.key)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/backends/zarr.py:262\u001b[39m, in \u001b[36mZarrArrayWrapper.__getitem__\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m    260\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, indexing.OuterIndexer):\n\u001b[32m    261\u001b[39m     method = \u001b[38;5;28mself\u001b[39m._oindex\n\u001b[32m--> \u001b[39m\u001b[32m262\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mindexing\u001b[49m\u001b[43m.\u001b[49m\u001b[43mexplicit_indexing_adapter\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    263\u001b[39m \u001b[43m    \u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43marray\u001b[49m\u001b[43m.\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexing\u001b[49m\u001b[43m.\u001b[49m\u001b[43mIndexingSupport\u001b[49m\u001b[43m.\u001b[49m\u001b[43mVECTORIZED\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmethod\u001b[49m\n\u001b[32m    264\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/core/indexing.py:1129\u001b[39m, in \u001b[36mexplicit_indexing_adapter\u001b[39m\u001b[34m(key, shape, indexing_support, raw_indexing_method)\u001b[39m\n\u001b[32m   1107\u001b[39m \u001b[38;5;250m\u001b[39m\u001b[33;03m\"\"\"Support explicit indexing by delegating to a raw indexing method.\u001b[39;00m\n\u001b[32m   1108\u001b[39m \n\u001b[32m   1109\u001b[39m \u001b[33;03mOuter and/or vectorized indexers are supported by indexing a second time\u001b[39;00m\n\u001b[32m   (...)\u001b[39m\u001b[32m   1126\u001b[39m \u001b[33;03mIndexing result, in the form of a duck numpy-array.\u001b[39;00m\n\u001b[32m   1127\u001b[39m \u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m   1128\u001b[39m raw_key, numpy_indices = decompose_indexer(key, shape, indexing_support)\n\u001b[32m-> \u001b[39m\u001b[32m1129\u001b[39m result = \u001b[43mraw_indexing_method\u001b[49m\u001b[43m(\u001b[49m\u001b[43mraw_key\u001b[49m\u001b[43m.\u001b[49m\u001b[43mtuple\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1130\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m numpy_indices.tuple:\n\u001b[32m   1131\u001b[39m     \u001b[38;5;66;03m# index the loaded duck array\u001b[39;00m\n\u001b[32m   1132\u001b[39m     indexable = as_indexable(result)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/backends/zarr.py:225\u001b[39m, in \u001b[36mZarrArrayWrapper._getitem\u001b[39m\u001b[34m(self, key)\u001b[39m\n\u001b[32m    224\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m_getitem\u001b[39m(\u001b[38;5;28mself\u001b[39m, key):\n\u001b[32m--> \u001b[39m\u001b[32m225\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_array\u001b[49m\u001b[43m[\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m]\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/zarr/core.py:798\u001b[39m, in \u001b[36mArray.__getitem__\u001b[39m\u001b[34m(self, selection)\u001b[39m\n\u001b[32m    796\u001b[39m     result = \u001b[38;5;28mself\u001b[39m.vindex[selection]\n\u001b[32m    797\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m is_pure_orthogonal_indexing(pure_selection, \u001b[38;5;28mself\u001b[39m.ndim):\n\u001b[32m--> \u001b[39m\u001b[32m798\u001b[39m     result = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mget_orthogonal_selection\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpure_selection\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfields\u001b[49m\u001b[43m=\u001b[49m\u001b[43mfields\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    799\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    800\u001b[39m     result = \u001b[38;5;28mself\u001b[39m.get_basic_selection(pure_selection, fields=fields)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/zarr/core.py:1080\u001b[39m, in \u001b[36mArray.get_orthogonal_selection\u001b[39m\u001b[34m(self, selection, out, fields)\u001b[39m\n\u001b[32m   1077\u001b[39m \u001b[38;5;66;03m# setup indexer\u001b[39;00m\n\u001b[32m   1078\u001b[39m indexer = OrthogonalIndexer(selection, \u001b[38;5;28mself\u001b[39m)\n\u001b[32m-> \u001b[39m\u001b[32m1080\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_get_selection\u001b[49m\u001b[43m(\u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m=\u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mout\u001b[49m\u001b[43m=\u001b[49m\u001b[43mout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfields\u001b[49m\u001b[43m=\u001b[49m\u001b[43mfields\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/zarr/core.py:1343\u001b[39m, in \u001b[36mArray._get_selection\u001b[39m\u001b[34m(self, indexer, out, fields)\u001b[39m\n\u001b[32m   1340\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m math.prod(out_shape) > \u001b[32m0\u001b[39m:\n\u001b[32m   1341\u001b[39m     \u001b[38;5;66;03m# allow storage to get multiple items at once\u001b[39;00m\n\u001b[32m   1342\u001b[39m     lchunk_coords, lchunk_selection, lout_selection = \u001b[38;5;28mzip\u001b[39m(*indexer)\n\u001b[32m-> \u001b[39m\u001b[32m1343\u001b[39m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_chunk_getitems\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   1344\u001b[39m \u001b[43m        \u001b[49m\u001b[43mlchunk_coords\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1345\u001b[39m \u001b[43m        \u001b[49m\u001b[43mlchunk_selection\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1346\u001b[39m \u001b[43m        \u001b[49m\u001b[43mout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1347\u001b[39m \u001b[43m        \u001b[49m\u001b[43mlout_selection\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1348\u001b[39m \u001b[43m        \u001b[49m\u001b[43mdrop_axes\u001b[49m\u001b[43m=\u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m.\u001b[49m\u001b[43mdrop_axes\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1349\u001b[39m \u001b[43m        \u001b[49m\u001b[43mfields\u001b[49m\u001b[43m=\u001b[49m\u001b[43mfields\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1350\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1351\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m out.shape:\n\u001b[32m   1352\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m out\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/zarr/core.py:2179\u001b[39m, in \u001b[36mArray._chunk_getitems\u001b[39m\u001b[34m(self, lchunk_coords, lchunk_selection, out, lout_selection, drop_axes, fields)\u001b[39m\n\u001b[32m   2177\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(\u001b[38;5;28mself\u001b[39m._meta_array, np.ndarray):\n\u001b[32m   2178\u001b[39m         contexts = ConstantMap(ckeys, constant=Context(meta_array=\u001b[38;5;28mself\u001b[39m._meta_array))\n\u001b[32m-> \u001b[39m\u001b[32m2179\u001b[39m     cdatas = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mchunk_store\u001b[49m\u001b[43m.\u001b[49m\u001b[43mgetitems\u001b[49m\u001b[43m(\u001b[49m\u001b[43mckeys\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcontexts\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcontexts\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   2181\u001b[39m \u001b[38;5;28;01mfor\u001b[39;00m ckey, chunk_select, out_select \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(ckeys, lchunk_selection, lout_selection):\n\u001b[32m   2182\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m ckey \u001b[38;5;129;01min\u001b[39;00m cdatas:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/zarr/storage.py:1435\u001b[39m, in \u001b[36mFSStore.getitems\u001b[39m\u001b[34m(self, keys, contexts)\u001b[39m\n\u001b[32m   1432\u001b[39m     \u001b[38;5;28;01mcontinue\u001b[39;00m\n\u001b[32m   1433\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(v, \u001b[38;5;167;01mException\u001b[39;00m):\n\u001b[32m   1434\u001b[39m     \u001b[38;5;66;03m# Raise any other exception\u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m1435\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m v\n\u001b[32m   1436\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m   1437\u001b[39m     \u001b[38;5;66;03m# The function calling this method may not recognize the transformed\u001b[39;00m\n\u001b[32m   1438\u001b[39m     \u001b[38;5;66;03m# keys, so we send the values returned by self.map.getitems back into\u001b[39;00m\n\u001b[32m   1439\u001b[39m     \u001b[38;5;66;03m# the original key space.\u001b[39;00m\n\u001b[32m   1440\u001b[39m     results[keys_transformed[k]] = v\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/fsspec/asyn.py:244\u001b[39m, in \u001b[36m_run_coros_in_chunks.<locals>._run_coro\u001b[39m\u001b[34m(coro, i)\u001b[39m\n\u001b[32m    242\u001b[39m \u001b[38;5;28;01masync\u001b[39;00m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m_run_coro\u001b[39m(coro, i):\n\u001b[32m    243\u001b[39m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m--> \u001b[39m\u001b[32m244\u001b[39m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m asyncio.wait_for(coro, timeout=timeout), i\n\u001b[32m    245\u001b[39m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[32m    246\u001b[39m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m return_exceptions:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/asyncio/tasks.py:520\u001b[39m, in \u001b[36mwait_for\u001b[39m\u001b[34m(fut, timeout)\u001b[39m\n\u001b[32m    517\u001b[39m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTimeoutError\u001b[39;00m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mexc\u001b[39;00m\n\u001b[32m    519\u001b[39m \u001b[38;5;28;01masync\u001b[39;00m \u001b[38;5;28;01mwith\u001b[39;00m timeouts.timeout(timeout):\n\u001b[32m--> \u001b[39m\u001b[32m520\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mawait\u001b[39;00m fut\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/fsspec/implementations/http.py:246\u001b[39m, in \u001b[36mHTTPFileSystem._cat_file\u001b[39m\u001b[34m(self, url, start, end, **kwargs)\u001b[39m\n\u001b[32m    244\u001b[39m \u001b[38;5;28;01masync\u001b[39;00m \u001b[38;5;28;01mwith\u001b[39;00m session.get(\u001b[38;5;28mself\u001b[39m.encode_url(url), **kw) \u001b[38;5;28;01mas\u001b[39;00m r:\n\u001b[32m    245\u001b[39m     out = \u001b[38;5;28;01mawait\u001b[39;00m r.read()\n\u001b[32m--> \u001b[39m\u001b[32m246\u001b[39m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_raise_not_found_for_status\u001b[49m\u001b[43m(\u001b[49m\u001b[43mr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43murl\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    247\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m out\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/fsspec/implementations/http.py:229\u001b[39m, in \u001b[36mHTTPFileSystem._raise_not_found_for_status\u001b[39m\u001b[34m(self, response, url)\u001b[39m\n\u001b[32m    227\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m response.status == \u001b[32m404\u001b[39m:\n\u001b[32m    228\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mFileNotFoundError\u001b[39;00m(url)\n\u001b[32m--> \u001b[39m\u001b[32m229\u001b[39m \u001b[43mresponse\u001b[49m\u001b[43m.\u001b[49m\u001b[43mraise_for_status\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/aiohttp/client_reqrep.py:629\u001b[39m, in \u001b[36mClientResponse.raise_for_status\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    626\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m._in_context:\n\u001b[32m    627\u001b[39m     \u001b[38;5;28mself\u001b[39m.release()\n\u001b[32m--> \u001b[39m\u001b[32m629\u001b[39m \u001b[38;5;28;01mraise\u001b[39;00m ClientResponseError(\n\u001b[32m    630\u001b[39m     \u001b[38;5;28mself\u001b[39m.request_info,\n\u001b[32m    631\u001b[39m     \u001b[38;5;28mself\u001b[39m.history,\n\u001b[32m    632\u001b[39m     status=\u001b[38;5;28mself\u001b[39m.status,\n\u001b[32m    633\u001b[39m     message=\u001b[38;5;28mself\u001b[39m.reason,\n\u001b[32m    634\u001b[39m     headers=\u001b[38;5;28mself\u001b[39m.headers,\n\u001b[32m    635\u001b[39m )\n\n\u001b[31mClientResponseError\u001b[39m: 504, message='Gateway Timeout', url='https://dtn-pas.cinc.nrp.internet2.edu:8443/aws-opendata/us-west-2/cmip6-pds/CMIP6/CMIP/CSIRO-ARCCSS/ACCESS-CM2/historical/r1i1p1f1/Amon/tas/gn/v20191108/tas/0.0.0'","ename":"ClientResponseError","evalue":"504, message='Gateway Timeout', url='https://dtn-pas.cinc.nrp.internet2.edu:8443/aws-opendata/us-west-2/cmip6-pds/CMIP6/CMIP/CSIRO-ARCCSS/ACCESS-CM2/historical/r1i1p1f1/Amon/tas/gn/v20191108/tas/0.0.0'"}],"key":"f6KBRXTLJz"}],"key":"x7IMS7QcP2"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Direct Access of Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qinHv6qytJ"}],"identifier":"direct-access-of-data","label":"Direct Access of Data","html_id":"direct-access-of-data","implicit":true,"key":"FxbDYUMFid"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"You can also access the data directly using normal file system calls.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"apXljy4653"}],"key":"I3htxVHBlR"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"For example, let’s say you want to read in a csv object from the OSDF. Just use the same pattern we’ve shown before of","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Bewp75wESS"}],"key":"t7k04zeGQ6"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"inlineCode","value":"osdf:///<namespace-path>","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"gT3lXW8RBS"}],"key":"ufeyLHW86Q"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"for your path.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"KLfQSnRgT2"}],"key":"F7cMDRCt5e"}],"key":"jkWh5b34Vm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"with fsspec.open('osdf:///ndp/burnpro3d/YosemiteBurnExample/burnpro3d-yosemite-example.csv') as ex_csv:\n    content = ex_csv.read()\n    print(content.decode())","key":"xxdjuPIhDR"},{"type":"output","id":"93ExwJwHz4Cb9qurB9E1r","data":[],"key":"u2JisUCxyY"}],"key":"MdIz9eIfhp"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BxbWvTISQQ"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"MmprW02dU3"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In this notebook we demonstrated how to use PelicanFS and gave an overview of a few different common usages. The main example showed how to use PelicanFS and Xarray to open a Zarr store. We also showed how to use PelicanFS and an intake catalog.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"fKpOUJiG6D"}],"key":"CeJCDilkD4"},{"type":"heading","depth":3,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"What’s next?","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"K6mEZXNKFQ"}],"identifier":"whats-next","label":"What’s next?","html_id":"whats-next","implicit":true,"key":"qoM8DwYRre"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The following notebooks all demonstrate various workflows which will use PelicanFS to access data from the OSDF.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"oGKCtVSRce"}],"key":"Iq9LrrFitN"}],"key":"opR5MVrgak"}],"key":"cUxwy5ynnC"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Streaming Data with the Open Science Data Federation (OSDF)","url":"/notebooks/osdf-intro","group":"Introduction to OSDF"},"next":{"title":"Introduction to NSF NCAR’s Geoscience Data Exhcange","url":"/notebooks/ncar-intro","group":"NCAR examples"}}},"domain":"http://localhost:3000"}