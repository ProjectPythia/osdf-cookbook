{"version":2,"kind":"Notebook","sha256":"0ba524d9363a1973fb82642b3b8fc68a041e678852dec8b3bb51a7d88a3d22ec","slug":"notebooks.sonarai-technical","location":"/notebooks/04_SonarAI_Technical.ipynb","dependencies":[],"frontmatter":{"title":"Contextual Integration of NCAR/NOAA Environmental Data with the NOAA Water Column Sonar Archive","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Harsha R. Hampapura","given":"Harsha R.","family":"Hampapura"},"name":"Harsha R. Hampapura","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Brian Bockelman","given":"Brian","family":"Bockelman"},"name":"Brian Bockelman","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Alexander Hoelzeman","given":"Alexander","family":"Hoelzeman"},"name":"Alexander Hoelzeman","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Carrie Wall","given":"Carrie","family":"Wall"},"name":"Carrie Wall","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Emma Turetsky","given":"Emma","family":"Turetsky"},"name":"Emma Turetsky","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Amandha Wingert Barok","given":"Amandha Wingert","family":"Barok"},"name":"Amandha Wingert Barok","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Aashish Panta","given":"Aashish","family":"Panta"},"name":"Aashish Panta","id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Riley Conroy","given":"Riley","family":"Conroy"},"name":"Riley Conroy","id":"contributors-myst-generated-uid-7"},{"nameParsed":{"literal":"Douglas Schuster","given":"Douglas","family":"Schuster"},"name":"Douglas Schuster","id":"contributors-myst-generated-uid-8"},{"nameParsed":{"literal":"Justin Hiemstra","given":"Justin","family":"Hiemstra"},"name":"Justin Hiemstra","id":"contributors-myst-generated-uid-9"},{"nameParsed":{"literal":"Joanmarie Del Vecchio","given":"Joanmarie Del","family":"Vecchio"},"name":"Joanmarie Del Vecchio","id":"contributors-myst-generated-uid-10"},{"nameParsed":{"literal":"Kibiwott Koech","given":"Kibiwott","family":"Koech"},"name":"Kibiwott Koech","id":"contributors-myst-generated-uid-11"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/osdf-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"source_url":"https://github.com/projectpythia/osdf-cookbook/blob/main/notebooks/04_SonarAI_Technical.ipynb","edit_url":"https://github.com/projectpythia/osdf-cookbook/edit/main/notebooks/04_SonarAI_Technical.ipynb","exports":[{"format":"ipynb","filename":"04_SonarAI_Technical.ipynb","url":"/osdf-cookbook/build/04_SonarAI_Technical-7f48d80aca4b6970ab3599bba0808039.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"code","lang":"","value":"","key":"pA4NHTFaeg"}],"key":"Ykuve0pCQX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Contextual Integration of NCAR/NOAA Environmental Data with the NOAA Water Column Sonar Archive","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ktJE3imHeZ"}],"identifier":"contextual-integration-of-ncar-noaa-environmental-data-with-the-noaa-water-column-sonar-archive","label":"Contextual Integration of NCAR/NOAA Environmental Data with the NOAA Water Column Sonar Archive","html_id":"contextual-integration-of-ncar-noaa-environmental-data-with-the-noaa-water-column-sonar-archive","implicit":true,"key":"s42x5F9eVS"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This notebook walks through an end-to-end workflow to relate shipboard sonar backscatter (Sv) to local environmental conditions. We (1) open EK60 data from a public NOAA S3 Zarr, (2) gather co-located environmental variables from OISST and IOOS ERDDAP, (3) compute hourly mean Sv, (4) assemble a depth×time error map for reference, and (5) synchronize timestamps to produce an interactive line-plus-heatmap visualization. All selections (time/depth/frequency) and conversions are kept explicit for reproducibility.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vTiYCJZNWH"}],"key":"uOnC8edAAO"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"O99oa4ce0Q"}],"key":"cyR2jexiLr"},{"type":"text","value":"\nLoad core libraries for data access (xarray, s3fs), analysis (numpy, pandas), plotting (plotly), and I/O.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"nlTyVICwN4"}],"key":"JX2iOy2pM2"}],"key":"WBoRgKSoDH"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Initializing the datasets","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"JGpyFmFplV"}],"key":"f2Hy3eq4ks"},{"type":"text","value":"\nAccess HB1906 EK60 Zarr data from public S3; subset by time/depth, select 38 kHz, and mask bins below bottom.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"xY7GEZ5ubs"}],"key":"Pk97ePuW3B"}],"key":"mPUnuUt3MH"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Access buoy data","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"pg42AE3GdQ"}],"key":"uGRHDY8UDa"},{"type":"text","value":"\nDefine Georges Bank buoy coordinates, sample daily OISST SST at the nearest grid cell (±1 day), and download the model error map (","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"knfTtO8Cyy"},{"type":"inlineCode","value":".npy","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"qxjVneTrdL"},{"type":"text","value":").","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Gte0WVRyxc"}],"key":"AQpwuJFO7f"}],"key":"zF6S5DMQPA"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Calculate the temperature anomaly, sun elevation in degree and azimuth","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"RxOakoVRB4"}],"key":"wa1bZTTvgI"}],"key":"AXS7Z2Hvy7"}],"key":"ozBNb3jROl"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Downloading external error map for the specific location","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"itibGAGv8p"}],"key":"L4o07PB1BJ"},{"type":"text","value":"\nDownloading the error map comes from a fixed file","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"NI4DCw8tFI"}],"key":"SulSHHzGoK"}],"key":"wGWzVCvxmP"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"strong","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Helper Function: Mean Sv (dB)","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"AKYBty1jIk"}],"key":"jId2fzF632"},{"type":"text","value":"\nConvert Sv from dB→linear, compute mean, convert back to dB.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"Sr2O3WUj4n"}],"key":"TCqb6IE6pd"}],"key":"v4npwsRlbv"},{"type":"listItem","spread":true,"position":{"start":{"line":22,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"strong","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"Group Cruise Data into Hourly Chunks","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"HKf6ld0Nl6"}],"key":"XjaVikgVjg"},{"type":"text","value":"\nAdd an hourly label and split the EK60 dataset into per-hour ","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"tBYTR0mN3Q"},{"type":"inlineCode","value":"xarray.Dataset","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"ZTU2t0kq1B"},{"type":"text","value":" chunks.","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"uvXBE5QXt1"}],"key":"bt8r7Ir0kL"}],"key":"eqZDumWnuc"},{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":25,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"strong","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"Compute Hourly Mean Sv & Attach to ","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"fCMu46z6AY"},{"type":"inlineCode","value":"env_df","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"aTtTLBeWUk"}],"key":"KRoY4zivZK"},{"type":"text","value":"\nAggregate Sv per hour and append results as a new column in the environmental dataframe.","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"QiA0Lp38ZS"}],"key":"CAFu9wdvX2"}],"key":"e4O7LMq2Is"},{"type":"listItem","spread":true,"position":{"start":{"line":28,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"strong","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Build Depth×Time Error-Map DataFrame & Align Timestamps","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"thYqGvJ8Ko"}],"key":"GAKvmd5StZ"},{"type":"text","value":"\nConstruct a depth-by-time matrix from the error map, guard for size mismatches, and align ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"ZmByIvkvIn"},{"type":"inlineCode","value":"env_df","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"a3APDzEwvJ"},{"type":"text","value":" endpoints to the heatmap timestamps.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"rQLo0t5YSm"}],"key":"fD0IEAJu2z"}],"key":"Y6Gpa7hz18"},{"type":"listItem","spread":true,"position":{"start":{"line":31,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"strong","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"Data Visualization: Synchronized Lines + Heatmap","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"RDmmoQGllr"}],"key":"MRIYvYoJ60"},{"type":"text","value":"\nPlot environmental time series above a depth×time heatmap with shared x-axis; save interactive HTML output.","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"m4P9B5MkgS"}],"key":"pm9SdO5o26"}],"key":"nAwbIRVYYi"}],"key":"rzOzFca94x"}],"key":"EyZlArtwVr"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"piF6mAwwmf"}],"key":"xEg2lVzSzY"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Th2fhixKA1"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"J5Yxbw2K02"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"This section was inspired by ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"VBN5PEiSjC"},{"type":"link","url":"https://github.com/alan-turing-institute/the-turing-way/blob/master/book/templates/chapter-template/chapter-landing-page.md","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"this template","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"pW09PgEfXJ"}],"urlSource":"https://github.com/alan-turing-institute/the-turing-way/blob/master/book/templates/chapter-template/chapter-landing-page.md","data":{"kind":"file","org":"alan-turing-institute","repo":"the-turing-way","reference":"master","file":"book/templates/chapter-template/chapter-landing-page.md","raw":"https://raw.githubusercontent.com/alan-turing-institute/the-turing-way/master/book/templates/chapter-template/chapter-landing-page.md"},"internal":false,"protocol":"github","key":"JjoQ8h5ce0"},{"type":"text","value":" of the wonderful ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"rGoVthO5sk"},{"type":"link","url":"https://the-turing-way.netlify.app","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The Turing Way","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"cv98x5bEly"}],"urlSource":"https://the-turing-way.netlify.app","key":"tB7tKhLZDZ"},{"type":"text","value":" Jupyter Book.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Y1Xxiz2bVx"}],"key":"xJuDYhYvcn"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This notebook opens public NOAA EK60 Zarr data from S3, subsets by time/depth, reads daily OISST SST near a buoy, fetches ERDDAP environmental variables, computes hourly mean ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"yP1VOXvbsY"},{"type":"strong","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Sv","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"yEO1Lipxnk"}],"key":"Ygw2UsAn5E"},{"type":"text","value":" (dB), aligns with a depth×time error map, and renders synchronized line/heatmap plots.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"gBKTPKoZ1j"}],"key":"kX7q5cUkD4"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Label the importance of each concept explicitly as ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"JGbBpPAFQd"},{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"helpful/necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"w1F7Uq5c0e"}],"key":"mwY2m0jG6M"},{"type":"text","value":".","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"lR5eNo9yGK"}],"key":"Ilq3MmIdws"},{"type":"table","position":{"start":{"line":8,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"I5zrt0yWZ8"}],"key":"FN2B7SrBaO"},{"type":"tableCell","header":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"yYljjJ5KZy"}],"key":"NWsmVah2iE"},{"type":"tableCell","header":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"JCwuezWuwe"}],"key":"xepdeZGwAr"}],"key":"xu7FLO6RXy"},{"type":"tableRow","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Xarray + Zarr basics","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"YXtu74lrin"}],"key":"Gc0K8U2N7L"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"zrORYAQWOc"}],"key":"MwfjXaBwMv"}],"key":"bRo2EU0Tzy"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Opening Zarr stores, selecting by coords/dims, ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Og1WrhMsdE"},{"type":"inlineCode","value":".compute()","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"n69eHurhWu"},{"type":"text","value":" semantics","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"kCGJKFSSK8"}],"key":"LmCynZ5oNM"}],"key":"omvwyPZIb4"},{"type":"tableRow","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"s3fs & public S3 access","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"IhM8Tl6JOS"}],"key":"RlKbqUpjKV"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"c6qihPxW8x"}],"key":"mHctaWss8u"}],"key":"SPi8KH6kwY"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Anonymous reads from AWS S3 (","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"x0fBHrBW7Y"},{"type":"inlineCode","value":"anon=True","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"l4iZUOThq4"},{"type":"text","value":")","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Y6rx4SOuvd"}],"key":"jvoy18lQox"}],"key":"OL0e6RChx3"},{"type":"tableRow","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Pandas time series","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"KDZTVWFE5H"}],"key":"XUb6DMCuW8"},{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"strong","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"TbbTMACQOk"}],"key":"FEPlAYQDYt"}],"key":"PmuKbAJ2kq"},{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"inlineCode","value":"DatetimeIndex","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"SlsrRRNwE1"},{"type":"text","value":", sorting, filtering, timezone-naive vs. aware","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"uQiECLiLIk"}],"key":"VukPQLcJzH"}],"key":"L98nzCY5Uz"},{"type":"tableRow","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"NumPy fundamentals","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"PNAcw2enZF"}],"key":"qIT1nkyvY9"},{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"strong","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"Ynp2YP2SLt"}],"key":"YaANwI6ZS5"}],"key":"lB3g1orCXA"},{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Array slicing, stats, type conversion","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"jXG1lZS9tW"}],"key":"lMExD2WZPX"}],"key":"FaxTtXWu8y"},{"type":"tableRow","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Acoustic backscatter (Sv) & dB averaging","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"CIuazYmAS0"}],"key":"PokyfgFnJy"},{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"lKUmtrKlAQ"}],"key":"p8IPPcAlav"}],"key":"E9QnfhLOvi"},{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Convert dB→linear, mean, then linear→dB, Understanding results","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"c5dtMss925"}],"key":"K6mehSugH5"}],"key":"zMuD9hRuGT"},{"type":"tableRow","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"ERDDAP tabledap & info endpoints","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"fQHIRUkTLZ"}],"key":"F0BSTHN2HN"},{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"strong","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"kt4kByOpmT"}],"key":"m8CpbbDPit"}],"key":"gfySkt7JX9"},{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Reading CSV responses; unit metadata lookup","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"tMGmYusf1C"}],"key":"jTymmaMHXx"}],"key":"if9T6mO9yI"},{"type":"tableRow","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Plotly fundamentals","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"URSq89ZuDG"}],"key":"wuLX3PmcYB"},{"type":"tableCell","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"vGVabDurak"}],"key":"Y3oK7VDrJU"}],"key":"cU8bu0UWOy"},{"type":"tableCell","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Subplots, heatmaps, interactive HTML export","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"J9xJfzSrzX"}],"key":"hsBLcZFHX9"}],"key":"H6s0BpKDDw"},{"type":"tableRow","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Understanding of NetCDF/CF","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"JHwF3revej"}],"key":"mIwp5ZAmma"},{"type":"tableCell","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"w96IojVrtz"}],"key":"OsTxAjIRT8"}],"key":"Nkt0o4tGlN"},{"type":"tableCell","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Variable metadata and geospatial conventions","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"DZoPOfDisi"}],"key":"pT0lLTzClF"}],"key":"uiQxIMCHfV"},{"type":"tableRow","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Dask awareness","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"J0IwUH2LzD"}],"key":"Y7iB6jYxyg"},{"type":"tableCell","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"strong","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"oIOJ4M4MeR"}],"key":"TOgutQasDH"}],"key":"ndc3xY0wOq"},{"type":"tableCell","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Lazy arrays; when/why to call ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"IwIrvQro6n"},{"type":"inlineCode","value":".compute()","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"i3o8OkA2pM"}],"key":"Ejq7zcxwCY"}],"key":"S0oiP9VNtK"},{"type":"tableRow","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Geographic coordinates","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"Ya0jQ7s1Rt"}],"key":"FMgI5W3vnd"},{"type":"tableCell","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"strong","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"FWdRzRdf7b"}],"key":"FJtWPZQozo"}],"key":"f6y2xPrUkZ"},{"type":"tableCell","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"0–360 vs. −180–180 longitude handling","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"aCXFNhjxVR"}],"key":"EWSBNAMLd4"}],"key":"MH0zgjd74v"},{"type":"tableRow","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"HTTP/IO with ","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"BTVanUnxJh"},{"type":"inlineCode","value":"requests","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"Z9okJertTC"}],"key":"hACfw6eBkQ"},{"type":"tableCell","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"strong","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"yukXcJrr9s"}],"key":"bU4ydHyqTd"}],"key":"U8EJ6UoYM7"},{"type":"tableCell","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Downloading ","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"C4CAHj6Z8A"},{"type":"inlineCode","value":".npy","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"fWmrn0POdm"},{"type":"text","value":" assets for local use","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"nHQK3r1MH7"}],"key":"fkbgiGxd3g"}],"key":"iruIxLq0Ye"}],"key":"D9BxFHGbRa"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":22,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":22,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"strong","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"t3AZNRl7Hv"}],"key":"skouhRXcuJ"},{"type":"text","value":": ~75 minutes","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"sZ1a3jMw07"}],"key":"v1aUkaevDM"}],"key":"lIzE185sr9"},{"type":"listItem","spread":true,"position":{"start":{"line":24,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"strong","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"System requirements","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"qiCoEZo2Pk"}],"key":"v43SFsEr4x"},{"type":"text","value":":","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"P0jOGz3eVw"}],"key":"RiciIkGpo3"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":25,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Python 3.9+ with Jupyter Notebook/Lab","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"yf0CJq7bE7"}],"key":"t3SDqmmRIs"}],"key":"pF1lKUvRhG"},{"type":"listItem","spread":true,"position":{"start":{"line":26,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Required packages: ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"rLG2wCxnyd"},{"type":"inlineCode","value":"xarray","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"dDycYNKmt8"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"YQvRqV2rqd"},{"type":"inlineCode","value":"s3fs","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"oPWD6Hfqxk"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"UnDPJ0ff8V"},{"type":"inlineCode","value":"numpy","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"IFlDytmGi1"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"tFycWW9tLn"},{"type":"inlineCode","value":"pandas","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"pYmiBv9Kso"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"mX81Gusfa5"},{"type":"inlineCode","value":"plotly","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"wjiXcbLrrn"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"Apf5wfIpOv"},{"type":"inlineCode","value":"requests","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"vguvFoYKNn"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"Q2j2Lus4yB"},{"type":"inlineCode","value":"netCDF4","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"oJY6ZKSdWZ"},{"type":"text","value":" ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"lPbJOyLrtq"},{"type":"emphasis","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"(optional but helpful: ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"gsR6G606FJ"},{"type":"inlineCode","value":"dask","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"iTS2c4GK0j"},{"type":"text","value":")","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"zLZYizG4Ea"}],"key":"Oa5vQoAsos"}],"key":"vTxqJkys6Y"}],"key":"HOtmavULzX"}],"key":"iu7g5VTHKB"}],"key":"g6ByGgrtne"}],"key":"b2lRuj77RA"},{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"strong","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Note:","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"yNJPBIycfC"}],"key":"R9uohMMmyZ"},{"type":"text","value":" Run the cell below ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"mYLSzFNLLI"},{"type":"strong","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"only","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"ui5ADgGKGt"}],"key":"l3y81D87A5"},{"type":"text","value":" in a local environment to install the required packages. If you’re using Binder, skip this step.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"lhQ7VCoG3D"}],"key":"e9giRXOAxg"}],"key":"nSun1yY1Ng"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport sys\nimport yaml\nimport shutil\nimport subprocess\n\nENV_PATH = \"../environment.yml\"\n\nwith open(ENV_PATH, \"r\", encoding=\"utf-8\") as f:\n    env = yaml.safe_load(f)\n\nchannels = env.get(\"channels\", [])\ndeps = env.get(\"dependencies\", [])\n\nconda_pkgs = []\npip_pkgs = []\n\nfor dep in deps:\n    if isinstance(dep, str):\n        # Skip python pin and the literal 'pip' meta-package entry\n        name = dep.split(\"=\")[0].strip().lower()\n        if name in {\"python\", \"pip\"}:\n            continue\n        conda_pkgs.append(dep)\n    elif isinstance(dep, dict) and \"pip\" in dep:\n        pip_pkgs.extend(dep[\"pip\"])\n\n# Prefer mamba if present; fallback to conda\nconda_exe = shutil.which(\"mamba\") or shutil.which(\"conda\")\n\n# Install Conda packages\nif conda_pkgs:\n    if not conda_exe:\n        raise RuntimeError(\"Conda/mamba not found in PATH. Run this inside a Conda environment.\")\n    # Install into the current environment prefix\n    env_prefix = os.environ.get(\"CONDA_PREFIX\", sys.prefix)\n    cmd = [conda_exe, \"install\", \"-y\", \"-p\", env_prefix]\n    for ch in channels:\n        cmd += [\"-c\", ch]\n    cmd += conda_pkgs\n    print(\"Running:\", \" \".join(cmd))\n    subprocess.check_call(cmd)\nelse:\n    print(\"No Conda packages to install.\")\n\n# Install pip packages into the current kernel's Python\nif pip_pkgs:\n    cmd = [sys.executable, \"-m\", \"pip\", \"install\", *pip_pkgs]\n    print(\"Running:\", \" \".join(cmd))\n    subprocess.check_call(cmd)\nelse:\n    print(\"No pip packages to install.\")\n","key":"M4iMwPzwWF"},{"type":"output","id":"_r_2xclWBTNak9SrUmKWH","data":[{"output_type":"stream","name":"stdout","text":"Running: /usr/bin/conda install -y -p /home/runner/micromamba/envs/osdf-cookbook -c conda-forge jupyterlab mystmd jupyterlab-myst aiohttp bash_kernel intake=0.7.0 intake-esm=2024.2.6 pelicanplatform panel bokeh xmltodict cartopy colorcet cf-units boto3 basemap pelicanfs=1.2.1 matplotlib metpy pandas xarray geopandas pystac-client rasterio dask dask-jobqueue openpyxl hvplot plotly zarr=2.18.1 s3fs seaborn tqdm h5netcdf igwn-auth-utils=1.4.0\n"},{"output_type":"stream","name":"stdout","text":"\u001b[1;33mCI detected\u001b[0m\u001b[1;33m...\u001b[0m\n\u001b[1;33mBy accessing \u001b[0m\u001b[4;94mhttps://repo.anaconda.com/pkgs/main\u001b[0m\u001b[1;33m via CI for this repository you \u001b[0m\n\u001b[1;33macknowledge and agree to the Terms of Service:\u001b[0m\n\u001b[1;33mANACONDA TERMS OF SERVICE\u001b[0m\n\u001b[1;33mEffective Date: July \u001b[0m\u001b[1;36m15\u001b[0m\u001b[1;33m, \u001b[0m\u001b[1;36m2025\u001b[0m\n\n\u001b[1;33mSee \u001b[0m\u001b[4;94mhttps://anaconda.com/legal/terms/terms-of-service\u001b[0m\n\u001b[1;33mBy accessing \u001b[0m\u001b[4;94mhttps://repo.anaconda.com/pkgs/r\u001b[0m\u001b[1;33m via CI for this repository you \u001b[0m\n\u001b[1;33macknowledge and agree to the Terms of Service:\u001b[0m\n\u001b[1;33mANACONDA TERMS OF SERVICE\u001b[0m\n\u001b[1;33mEffective Date: July \u001b[0m\u001b[1;36m15\u001b[0m\u001b[1;33m, \u001b[0m\u001b[1;36m2025\u001b[0m\n\n\u001b[1;33mSee \u001b[0m\u001b[4;94mhttps://anaconda.com/legal/terms/terms-of-service\u001b[0m\n\u001b[1;32m2\u001b[0m\u001b[1;32m channel Terms of Service accepted\u001b[0m\nRetrieving notices: - \b\b\\ "},{"output_type":"stream","name":"stdout","text":"\b\bdone\n"},{"output_type":"stream","name":"stdout","text":"Channels:\n - conda-forge\n - defaults\nPlatform: linux-64\nCollecting package metadata (repodata.json): / \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| \b\b/ "},{"output_type":"stream","name":"stdout","text":"\b\b- \b\b\\ "},{"output_type":"stream","name":"stdout","text":"\b\b| \b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- \b\b\\ "},{"output_type":"stream","name":"stdout","text":"\b\b| \b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| \b\b/ "},{"output_type":"stream","name":"stdout","text":"\b\b- \b\b\\ "},{"output_type":"stream","name":"stdout","text":"\b\b| \b\b/ "},{"output_type":"stream","name":"stdout","text":"\b\b- \b\b\\ "},{"output_type":"stream","name":"stdout","text":"\b\b| \b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| \b\b/ "},{"output_type":"stream","name":"stdout","text":"\b\b- \b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- \b\b\\ "},{"output_type":"stream","name":"stdout","text":"\b\b| \b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ "},{"output_type":"stream","name":"stdout","text":"\b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ "},{"output_type":"stream","name":"stdout","text":"\b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ "},{"output_type":"stream","name":"stdout","text":"\b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ "},{"output_type":"stream","name":"stdout","text":"\b\b| \b\b/ "},{"output_type":"stream","name":"stdout","text":"\b\b- \b\bdone\nSolving environment: | "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\b- "},{"output_type":"stream","name":"stdout","text":"\b\b\\ \b\b| "},{"output_type":"stream","name":"stdout","text":"\b\b/ \b\bdone\n"},{"output_type":"stream","name":"stderr","text":"\n\n==> WARNING: A newer version of conda exists. <==\n    current version: 25.7.0\n    latest version: 25.9.0\n\nPlease update conda by running\n\n    $ conda update -n base -c defaults conda\n\n\n"},{"output_type":"stream","name":"stdout","text":"\n# All requested packages already installed.\n\n"},{"output_type":"stream","name":"stdout","text":"Running: /home/runner/micromamba/envs/osdf-cookbook/bin/python -m pip install import-ipynb OpenVisus openvisuspy pvlib rioxarray stackstac\n"},{"output_type":"stream","name":"stdout","text":"Requirement already satisfied: import-ipynb in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (0.2)\nRequirement already satisfied: OpenVisus in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (2.2.142)\nRequirement already satisfied: openvisuspy in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (1.0.71)\nRequirement already satisfied: pvlib in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (0.13.1)\nRequirement already satisfied: rioxarray in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (0.19.0)\nRequirement already satisfied: stackstac in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (0.5.1)\nRequirement already satisfied: IPython in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from import-ipynb) (9.6.0)\nRequirement already satisfied: nbformat in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from import-ipynb) (5.10.4)\nRequirement already satisfied: numpy>=1.21.2 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from pvlib) (2.3.3)\nRequirement already satisfied: pandas>=1.3.3 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from pvlib) (2.2.3)\nRequirement already satisfied: pytz in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from pvlib) (2024.1)\nRequirement already satisfied: requests in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from pvlib) (2.32.5)\nRequirement already satisfied: scipy>=1.7.2 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from pvlib) (1.16.2)\nRequirement already satisfied: h5py in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from pvlib) (3.14.0)\nRequirement already satisfied: packaging in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from rioxarray) (25.0)\nRequirement already satisfied: rasterio>=1.4.3 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from rioxarray) (1.4.3)\nRequirement already satisfied: xarray>=2024.7.0 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from rioxarray) (2025.9.1)\nRequirement already satisfied: pyproj>=3.3 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from rioxarray) (3.7.2)\nRequirement already satisfied: dask>=2022.1.1 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from dask[array]>=2022.1.1->stackstac) (2025.9.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from pandas>=1.3.3->pvlib) (2.9.0.post0)\nRequirement already satisfied: tzdata>=2022.7 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from pandas>=1.3.3->pvlib) (2025.2)\nRequirement already satisfied: certifi in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from pyproj>=3.3->rioxarray) (2025.8.3)\nRequirement already satisfied: affine in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from rasterio>=1.4.3->rioxarray) (2.4.0)\nRequirement already satisfied: attrs in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from rasterio>=1.4.3->rioxarray) (25.3.0)\nRequirement already satisfied: click>=4.0 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from rasterio>=1.4.3->rioxarray) (8.3.0)\nRequirement already satisfied: cligj>=0.5 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from rasterio>=1.4.3->rioxarray) (0.7.2)\nRequirement already satisfied: click-plugins in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from rasterio>=1.4.3->rioxarray) (1.1.1.2)\nRequirement already satisfied: pyparsing in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from rasterio>=1.4.3->rioxarray) (3.2.5)\n"},{"output_type":"stream","name":"stdout","text":"Requirement already satisfied: cloudpickle>=3.0.0 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from dask>=2022.1.1->dask[array]>=2022.1.1->stackstac) (3.1.1)\nRequirement already satisfied: fsspec>=2021.09.0 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from dask>=2022.1.1->dask[array]>=2022.1.1->stackstac) (2025.9.0)\nRequirement already satisfied: partd>=1.4.0 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from dask>=2022.1.1->dask[array]>=2022.1.1->stackstac) (1.4.2)\nRequirement already satisfied: pyyaml>=5.3.1 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from dask>=2022.1.1->dask[array]>=2022.1.1->stackstac) (6.0.3)\nRequirement already satisfied: toolz>=0.10.0 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from dask>=2022.1.1->dask[array]>=2022.1.1->stackstac) (1.0.0)\nRequirement already satisfied: locket in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from partd>=1.4.0->dask>=2022.1.1->dask[array]>=2022.1.1->stackstac) (1.0.0)\nRequirement already satisfied: six>=1.5 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from python-dateutil>=2.8.2->pandas>=1.3.3->pvlib) (1.17.0)\n"},{"output_type":"stream","name":"stdout","text":"Requirement already satisfied: decorator in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from IPython->import-ipynb) (5.2.1)\nRequirement already satisfied: ipython-pygments-lexers in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from IPython->import-ipynb) (1.1.1)\nRequirement already satisfied: jedi>=0.16 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from IPython->import-ipynb) (0.19.2)\nRequirement already satisfied: matplotlib-inline in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from IPython->import-ipynb) (0.1.7)\nRequirement already satisfied: pexpect>4.3 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from IPython->import-ipynb) (4.9.0)\nRequirement already satisfied: prompt_toolkit<3.1.0,>=3.0.41 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from IPython->import-ipynb) (3.0.52)\nRequirement already satisfied: pygments>=2.4.0 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from IPython->import-ipynb) (2.19.2)\nRequirement already satisfied: stack_data in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from IPython->import-ipynb) (0.6.3)\nRequirement already satisfied: traitlets>=5.13.0 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from IPython->import-ipynb) (5.14.3)\nRequirement already satisfied: wcwidth in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from prompt_toolkit<3.1.0,>=3.0.41->IPython->import-ipynb) (0.2.14)\nRequirement already satisfied: parso<0.9.0,>=0.8.4 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from jedi>=0.16->IPython->import-ipynb) (0.8.5)\nRequirement already satisfied: ptyprocess>=0.5 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from pexpect>4.3->IPython->import-ipynb) (0.7.0)\nRequirement already satisfied: fastjsonschema>=2.15 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from nbformat->import-ipynb) (2.21.2)\nRequirement already satisfied: jsonschema>=2.6 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from nbformat->import-ipynb) (4.25.1)\nRequirement already satisfied: jupyter-core!=5.0.*,>=4.12 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from nbformat->import-ipynb) (5.8.1)\nRequirement already satisfied: jsonschema-specifications>=2023.03.6 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from jsonschema>=2.6->nbformat->import-ipynb) (2025.9.1)\nRequirement already satisfied: referencing>=0.28.4 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from jsonschema>=2.6->nbformat->import-ipynb) (0.36.2)\nRequirement already satisfied: rpds-py>=0.7.1 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from jsonschema>=2.6->nbformat->import-ipynb) (0.27.1)\nRequirement already satisfied: platformdirs>=2.5 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from jupyter-core!=5.0.*,>=4.12->nbformat->import-ipynb) (4.4.0)\nRequirement already satisfied: typing-extensions>=4.4.0 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from referencing>=0.28.4->jsonschema>=2.6->nbformat->import-ipynb) (4.15.0)\nRequirement already satisfied: charset_normalizer<4,>=2 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from requests->pvlib) (3.4.3)\nRequirement already satisfied: idna<4,>=2.5 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from requests->pvlib) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from requests->pvlib) (2.5.0)\n"},{"output_type":"stream","name":"stdout","text":"Requirement already satisfied: executing>=1.2.0 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from stack_data->IPython->import-ipynb) (2.2.1)\nRequirement already satisfied: asttokens>=2.1.0 in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from stack_data->IPython->import-ipynb) (3.0.0)\nRequirement already satisfied: pure_eval in /home/runner/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages (from stack_data->IPython->import-ipynb) (0.2.3)\n"}],"key":"aU13qNDirU"}],"key":"npi1gU69Nr"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uOFMPOKCYP"}],"key":"DHt6bgfrne"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1) Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"P9v3ko9Wpl"}],"identifier":"id-1-imports","label":"1) Imports","html_id":"id-1-imports","implicit":true,"key":"ywQtDfbjMo"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Core libraries used throughout the notebook.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"oPOBgj6AVp"}],"key":"BpdLfNTEDV"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Key roles:","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"KwOMkWyoZM"}],"key":"gJgVfYHxBB"},{"type":"code","lang":"","value":"xarray/s3fs for reading NOAA Zarr data from S3\nnumpy/pandas for arrays & tables\nplotly for interactive plotting\nrequests/io/os for file I/O and downloads\ndatetime for time calculations","position":{"start":{"line":6,"column":1},"end":{"line":10,"column":1}},"key":"GUmkNNDwXC"}],"key":"tAx5vmUjk5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import xarray as xr\nimport s3fs\nimport numpy as np\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport pandas as pd\nimport requests\nimport io\nimport os\nimport rioxarray\nfrom datetime import datetime, timedelta\nimport pvlib","key":"LvDvI503MN"},{"type":"output","id":"OtVksJ9oPyV-iYNwqw9Mn","data":[],"key":"oQSsFesnKo"}],"key":"vgeFHQupJs"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2) Initializing the datasets","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GYP4FV8kSt"}],"identifier":"id-2-initializing-the-datasets","label":"2) Initializing the datasets","html_id":"id-2-initializing-the-datasets","implicit":true,"key":"D9N1VEMLXD"}],"key":"slUEOImf8z"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Builds the S3 path to the HB1906 EK60 Zarr dataset and opens it anonymously.\nSubsets by time window and depth range, selects the 38 kHz channel, and masks samples below the estimated bottom.\n.compute() materializes the selection; hm_timestamps will be reused for time alignment later. All datasets are accessed\nusing the OSDF infrastructure","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"chUwV7qN2m"}],"key":"CXZzM1Avwt"}],"key":"oPEXItzioK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"bucket_name = 'noaa-wcsd-zarr-pds'\nship_name = \"Henry_B._Bigelow\"\ncruise_name = \"HB1906\"\nsensor_name = \"EK60\"\n\n# Accessing the NOAA HB1906 dataset using OSDF (anonymous S3)\ns3_file_system = s3fs.S3FileSystem(anon=True)\nzarr_store = f'{cruise_name}.zarr'\ns3_zarr_store_path = f\"{bucket_name}/level_2/{ship_name}/{cruise_name}/{sensor_name}/{zarr_store}\"\n\n# Map S3 path to a zarr store and open (consolidated=None to let xarray infer metadata)\nstore = s3fs.S3Map(root=s3_zarr_store_path, s3=s3_file_system, check=False)\ncruise = xr.open_zarr(store=store, consolidated=None)\n\n# Time/depth subset and single-frequency selection\nstart_time = \"2019-10-16T15:00:00\"\nend_time = \"2019-10-16T23:11:09\"\ntimeslice = slice(start_time, end_time)\ndepths = slice(10, 250)\ncruise = cruise.sel(time=timeslice, depth=depths, drop=False)\ncruise = cruise.sel(frequency=38000, method='nearest').compute()  # materialize after selection\ncruise = cruise.where(cruise.depth < cruise.bottom + 2, drop=True)  # remove bins below bottom\n\n# Timestamps for later alignment\nhm_timestamps = cruise.time.values.tolist()","key":"gvTf71CpFB"},{"type":"output","id":"HFu0wP6xskax3xB78za0j","data":[],"key":"Xk7PaZQLv3"}],"key":"m5LTzWoVng"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"3) Accessing buoy data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"z9G4b2dZvh"}],"identifier":"id-3-accessing-buoy-data","label":"3) Accessing buoy data","html_id":"id-3-accessing-buoy-data","implicit":true,"key":"weyaTraVXs"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Defines a buoy location on Georges Bank (longitude converted to 0–360).","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"oZ3zkOaW4a"}],"key":"KjcmeW1Nhm"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Optional: Loads three daily OISST files and samples SST at the nearest grid point (day before, day of, day after).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"H9AQpngQ0p"}],"key":"D8mKp8fZwQ"}],"key":"HHPdb0H44q"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"ERDDAP buoy environmental data.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"KFVOL2YOI0"}],"key":"Kylds02AOI"}],"key":"ClDHaodozz"}],"key":"cAYPteoQfR"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Sets ERDDAP dataset parameters and enforces a max_days cap by adjusting end_date_time if needed.\nReads station metadata to extract lon/lat and wind-speed units; prepares a conversion to knots.\nPulls a table of time, wind_speed, SST, significant wave height, converts wind speed to knots, indexes by time.\nFilters to the requested window and keeps the first nine rows (intentional truncation for later alignment).","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"nNib3WmVpI"}],"key":"XljxhIswtD"}],"key":"JQ4CIQC3Aq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Location of one specific buoy located on Georges Bank\ntarget_lon = 360 - 66.546  # convert from -180..180 to 0..360\ntarget_lat = 41.088\n\n# ______________OPTIONAL BUOY DATA FROM NCAR/UCAR______________\n# print(f\"Target coordinates: Longitude: {target_lon}, Latitude: {target_lat}\")\n#\n# # Accessing stationary buoy data (daily OISST files); select nearest grid cell\n# buoy_data_day_before = xr.open_dataset(\n#     'https://data.rda.ucar.edu/d277007/avhrr_v2.1/2019/oisst-avhrr-v02r01.20191015.nc#mode=bytes', engine='netcdf4')\n# buoy_data_actual_day = xr.open_dataset(\n#     'https://data.rda.ucar.edu/d277007/avhrr_v2.1/2019/oisst-avhrr-v02r01.20191016.nc#mode=bytes',\n#     engine='netcdf4')\n# buoy_data_day_after = xr.open_dataset(\n#     'https://data.rda.ucar.edu/d277007/avhrr_v2.1/2019/oisst-avhrr-v02r01.20191017.nc#mode=bytes',\n#     engine='netcdf4')\n#\n# sst_day_before = buoy_data_day_before['sst'].sel(lon=target_lon, lat=target_lat, method='nearest').values[0][0]\n# sst_actual_day = buoy_data_actual_day['sst'].sel(lon=target_lon, lat=target_lat, method='nearest').values[0][0]\n# sst_day_after = buoy_data_day_after['sst'].sel(lon=target_lon, lat=target_lat, method='nearest').values[0][0]\n# ______________________________________________________________\n\n# The following code has been copied from https://github.com/ioos/soundcoop/blob/main/3_HMD_environmental_data/plot_sound_environmental_and_climatology_data.ipynb in order to access buoy environmental data.\n\nerddap_dataset = 'gov-ndbc-44005'\nsound_dataset = 'Monh'\nmax_days = 25\nstart_date_time = '2019-10-16T14:00:00.000'\nend_date_time = '2021-10-16T23:30:00.000'\nmin_frequency = 21\nmax_frequency = 24000\n\nerddap_base_url = 'https://erddap.sensors.ioos.us/erddap'\n\n# Cap the end date if requested range exceeds max_days\ntime_delta = datetime.fromisoformat(end_date_time) - datetime.fromisoformat(start_date_time)\nif time_delta.days > max_days:\n    end_date_time = str(datetime.fromisoformat(start_date_time) + timedelta(days=max_days))\n    print(f'end_date_time updated to {end_date_time}')\n\n# Get station lon/lat and units from ERDDAP metadata (CSV)\nerddap_metadata_url = f'{erddap_base_url}/info/{erddap_dataset}/index.csv'\nenv_metadata_df = pd.read_csv(erddap_metadata_url)\n\nenv_station_x = env_metadata_df.loc[env_metadata_df['Attribute Name'] == 'geospatial_lon_min']['Value'].item()\nenv_station_y = env_metadata_df.loc[env_metadata_df['Attribute Name'] == 'geospatial_lat_min']['Value'].item()\nswt_var = 'sea_surface_temperature'\n\n# __________OPTIONAL: Add Wind__________\n# Determine wind_speed units to convert to knots\n# wind_speed_units_row = env_metadata_df[\n#     (env_metadata_df['Row Type'] == 'attribute') &\n#     (env_metadata_df['Attribute Name'] == 'units') &\n#     # (env_metadata_df['Variable Name'] == 'wind_speed')\n#     ]\n# wind_speed_units = wind_speed_units_row.iloc[0]['Value']\n# print(wind_speed_units)\n\n# wind_speed_to_kts_factors = {\n#     \"m.s-1\": 1.94384,\n#     \"mph\": 0.86897423357831,\n#     \"kmh\": 0.53995555554212126825,\n#     \"ft.s-1\": 0.59248243198521155506\n# }\n\n# if wind_speed_units in wind_speed_to_kts_factors:\n#     print(\"Success! Units can be converted from\", wind_speed_units, 'to', 'kts')\n# else:\n#     print(\"Error! Wind speed cannot be converted from\", wind_speed_units, 'to', 'kts')\n\n# wind_var = 'wind_speed'\n# wave_var = 'sea_surface_wave_significant_height'\n# anomaly_var = 'swt_anomaly'\n# wind_var_kts = 'wind_speed_kts'\n# ________________________________________\n\n# Build ERDDAP tabledap query URL\nerddap_dataset_url = (\n    f'{erddap_base_url}/tabledap/{erddap_dataset}.csv'\n    f'?time,{swt_var}'\n)\n\n# Read dataset (skip the second row of units)\nenv_df = pd.read_csv(\n    erddap_dataset_url,\n    skiprows=[1]  # The second row (index 1) are the column units, which we don't need\n)\n\n# Format time, convert wind speed to knots, index by time\nenv_df['time'] = pd.to_datetime(env_df['time'])\n# env_df['wind_speed_kts'] = env_df['wind_speed'].apply(lambda x: x * wind_speed_to_kts_factors[wind_speed_units])\n# del env_df['wind_speed']\nenv_df = env_df.set_index('time').sort_index()\n\n# Filter by requested time window and keep first 9 rows (drops the rest)\nenv_df = env_df[(env_df.index > start_date_time) & (env_df.index < end_date_time)]\nenv_df.drop(env_df.tail(-9).index, inplace=True)\n# env_df","key":"uznPFEtYSY"},{"type":"output","id":"mrcKOCb3fcy0_XQXILgVO","data":[{"output_type":"stream","name":"stdout","text":"end_date_time updated to 2019-11-10 14:00:00\n"}],"key":"Lem79thsLI"}],"key":"Jy2o14a3yw"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"4) Calculate the temperature anomaly, sun elevation in degree and azimuth","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bCOUC44ctd"}],"identifier":"id-4-calculate-the-temperature-anomaly-sun-elevation-in-degree-and-azimuth","label":"4) Calculate the temperature anomaly, sun elevation in degree and azimuth","html_id":"id-4-calculate-the-temperature-anomaly-sun-elevation-in-degree-and-azimuth","implicit":true,"key":"Ltsddw32iV"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Extracts World Ocean Atlas 2023 temperature data for a specific location and month and calculates temperature anomaly (optional), sun elevation in degree and azimuth (optional).","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Ya0ss9VnJx"}],"key":"Hw7UMqBbHx"}],"key":"bi50i4kUMg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def get_woa23_temp_at_xy(x, y, month, var='t_mn', depth=0):\n    \"\"\"\n    Get 1-degree WOA 2023 temperature values for a given point and month.\n\n    Args:\n        x: A longitude value given in decimal degrees\n        y: A latitude value given in decimal degrees\n        month: The month asn integer from which to extract the value\n        var (optional): The temperature variable to use. Defaults to the statistical mean.\n        depth (optional): The depth at which to extract the value. Defaults to the surface.\n    \"\"\"\n    url = (\n        'https://www.ncei.noaa.gov/thredds-ocean/dodsC/woa23/DATA/'\n        f'temperature/netcdf/decav/1.00/woa23_decav_t{month:02}_01.nc'\n    )\n    ds = xr.open_dataset(\n        url,\n        decode_times=False  # xarray can't handle times defined as \"months since ...\"\n    )\n\n    da = ds.isel(depth=depth)[var]  # Pull out just the variable we're interested in\n\n    # Because nearshore locations are often NaN due to the grid's low resolution\n    # we need to interpolate the NaNs to the nearest non-NaN before extracting our value.\n    # We use rioxarray to do the interpolations in two dimensions because plain vanilla xarray\n    # can only interpolate in one dimension.\n    da = da.rio.write_crs(4326)\n    da = da.rio.interpolate_na(method='nearest')\n\n    # Then we extract the value, also using the nearest neighbor method because the given\n    # x and y values are unlikely to fall exactly on one of the grid's lat/lon coordinate pairs\n    val = da.sel(lon=x, lat=y, method='nearest').item()\n\n    return val\n\n\n# Define the location of our selected ERDDAP dataset\n# Override here if needed\nx = env_station_x\ny = env_station_y\n\nurl = (\n    'https://www.ncei.noaa.gov/thredds-ocean/dodsC/woa23/DATA/'\n    f'temperature/netcdf/decav/1.00/woa23_decav_t07_01.nc'\n)\nda = xr.open_dataset(\n    url,\n    decode_times=False  # xarray can't handle times defined as \"months since ...\"\n).isel(depth=0)['t_mn']  # Pull out just the variable we're interested in\n\n# Because nearshore locations are often NaN due to the grid's low resolution\n# we need to interpolate the NaNs to the nearest non-NaN before extracting our value.\n# We use rioxarray to do the interpolations in two dimensions because plain vanilla xarray\n# can only interpolate in one dimension.\nda = da.rio.write_crs(4326)\nda = da.rio.interpolate_na(method='nearest')\n\n# Then we extract the value, also using the nearest neighbor method because the given\n# x and y values are unlikely to fall exactly on one of the grid's lat/lon coordinate pairs\nval = da.sel(lon=x, lat=y, method='nearest').item()\n\n# Assemble a mapping between months and WOA 2023 temperature values\nmonths = list(range(1, 13))\ntemps = [get_woa23_temp_at_xy(x, y, m) for m in months]\nclim_dict = {m: t for m, t in zip(months, temps)}\n\n# Calculate the sea water temperature anomaly by subtracting the monthly WOA 2023 temperature value\n# from each measured sea water temperature value and store it as a new variable\nanomaly_var = env_df[swt_var] - [clim_dict[10]]\n# We are not adding the temperature_anomaly variable to our dataset, because we were able to see that it follows the sea surface temperature.\n# env_df[\"temperature_anomaly\"] = anomaly_var\n\n# ---- Time range in UTC ----\ntimes_utc = pd.date_range(\n    start=start_date_time,\n    end=end_date_time,\n    freq=\"1h\",\n    tz=\"UTC\"  # <-- key: set timezone to UTC\n)\n\n# ---- Calculate solar position ----\nsolpos = pvlib.solarposition.get_solarposition(times_utc, target_lat, target_lon)\n\n# ---- Extract elevation ----\ndf = pd.DataFrame({\n    \"time_utc\": times_utc,\n    \"elevation_deg\": solpos[\"elevation\"],\n    \"azimuth_deg\": solpos[\"azimuth\"]\n})\n\nenv_df[\"elevation_deg\"] = solpos[\"elevation\"].tolist()[1:10]\n# env_df[\"azimuth_deg\"] = solpos[\"azimuth\"].tolist()[:9]\nenv_df","key":"ITBWuCrrtU"},{"type":"output","id":"-Idu9s_HFlnungTPBD9kz","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mClientResponseError\u001b[39m                       Traceback (most recent call last)\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/fsspec/implementations/http.py:437\u001b[39m, in \u001b[36mHTTPFileSystem._info\u001b[39m\u001b[34m(self, url, **kwargs)\u001b[39m\n\u001b[32m    435\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m    436\u001b[39m     info.update(\n\u001b[32m--> \u001b[39m\u001b[32m437\u001b[39m         \u001b[38;5;28;01mawait\u001b[39;00m _file_info(\n\u001b[32m    438\u001b[39m             \u001b[38;5;28mself\u001b[39m.encode_url(url),\n\u001b[32m    439\u001b[39m             size_policy=policy,\n\u001b[32m    440\u001b[39m             session=session,\n\u001b[32m    441\u001b[39m             **\u001b[38;5;28mself\u001b[39m.kwargs,\n\u001b[32m    442\u001b[39m             **kwargs,\n\u001b[32m    443\u001b[39m         )\n\u001b[32m    444\u001b[39m     )\n\u001b[32m    445\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m info.get(\u001b[33m\"\u001b[39m\u001b[33msize\u001b[39m\u001b[33m\"\u001b[39m) \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/fsspec/implementations/http.py:853\u001b[39m, in \u001b[36m_file_info\u001b[39m\u001b[34m(url, session, size_policy, **kwargs)\u001b[39m\n\u001b[32m    852\u001b[39m \u001b[38;5;28;01masync\u001b[39;00m \u001b[38;5;28;01mwith\u001b[39;00m r:\n\u001b[32m--> \u001b[39m\u001b[32m853\u001b[39m     \u001b[43mr\u001b[49m\u001b[43m.\u001b[49m\u001b[43mraise_for_status\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    855\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[33m\"\u001b[39m\u001b[33mContent-Length\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;129;01min\u001b[39;00m r.headers:\n\u001b[32m    856\u001b[39m         \u001b[38;5;66;03m# Some servers may choose to ignore Accept-Encoding and return\u001b[39;00m\n\u001b[32m    857\u001b[39m         \u001b[38;5;66;03m# compressed content, in which case the returned size is unreliable.\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/aiohttp/client_reqrep.py:629\u001b[39m, in \u001b[36mClientResponse.raise_for_status\u001b[39m\u001b[34m(self)\u001b[39m\n\u001b[32m    627\u001b[39m     \u001b[38;5;28mself\u001b[39m.release()\n\u001b[32m--> \u001b[39m\u001b[32m629\u001b[39m \u001b[38;5;28;01mraise\u001b[39;00m ClientResponseError(\n\u001b[32m    630\u001b[39m     \u001b[38;5;28mself\u001b[39m.request_info,\n\u001b[32m    631\u001b[39m     \u001b[38;5;28mself\u001b[39m.history,\n\u001b[32m    632\u001b[39m     status=\u001b[38;5;28mself\u001b[39m.status,\n\u001b[32m    633\u001b[39m     message=\u001b[38;5;28mself\u001b[39m.reason,\n\u001b[32m    634\u001b[39m     headers=\u001b[38;5;28mself\u001b[39m.headers,\n\u001b[32m    635\u001b[39m )\n\n\u001b[31mClientResponseError\u001b[39m: 400, message='', url='https://www.ncei.noaa.gov/thredds-ocean/dodsC/woa23/DATA/temperature/netcdf/decav/1.00/woa23_decav_t07_01.nc'\n\nThe above exception was the direct cause of the following exception:\n\n\u001b[31mFileNotFoundError\u001b[39m                         Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[5]\u001b[39m\u001b[32m, line 46\u001b[39m\n\u001b[32m     40\u001b[39m y = env_station_y\n\u001b[32m     42\u001b[39m url = (\n\u001b[32m     43\u001b[39m     \u001b[33m'\u001b[39m\u001b[33mhttps://www.ncei.noaa.gov/thredds-ocean/dodsC/woa23/DATA/\u001b[39m\u001b[33m'\u001b[39m\n\u001b[32m     44\u001b[39m     \u001b[33mf\u001b[39m\u001b[33m'\u001b[39m\u001b[33mtemperature/netcdf/decav/1.00/woa23_decav_t07_01.nc\u001b[39m\u001b[33m'\u001b[39m\n\u001b[32m     45\u001b[39m )\n\u001b[32m---> \u001b[39m\u001b[32m46\u001b[39m da = \u001b[43mxr\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_dataset\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m     47\u001b[39m \u001b[43m    \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m     48\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdecode_times\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# xarray can't handle times defined as \"months since ...\"\u001b[39;49;00m\n\u001b[32m     49\u001b[39m \u001b[43m)\u001b[49m.isel(depth=\u001b[32m0\u001b[39m)[\u001b[33m'\u001b[39m\u001b[33mt_mn\u001b[39m\u001b[33m'\u001b[39m]  \u001b[38;5;66;03m# Pull out just the variable we're interested in\u001b[39;00m\n\u001b[32m     51\u001b[39m \u001b[38;5;66;03m# Because nearshore locations are often NaN due to the grid's low resolution\u001b[39;00m\n\u001b[32m     52\u001b[39m \u001b[38;5;66;03m# we need to interpolate the NaNs to the nearest non-NaN before extracting our value.\u001b[39;00m\n\u001b[32m     53\u001b[39m \u001b[38;5;66;03m# We use rioxarray to do the interpolations in two dimensions because plain vanilla xarray\u001b[39;00m\n\u001b[32m     54\u001b[39m \u001b[38;5;66;03m# can only interpolate in one dimension.\u001b[39;00m\n\u001b[32m     55\u001b[39m da = da.rio.write_crs(\u001b[32m4326\u001b[39m)\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/backends/api.py:596\u001b[39m, in \u001b[36mopen_dataset\u001b[39m\u001b[34m(filename_or_obj, engine, chunks, cache, decode_cf, mask_and_scale, decode_times, decode_timedelta, use_cftime, concat_characters, decode_coords, drop_variables, create_default_indexes, inline_array, chunked_array_type, from_array_kwargs, backend_kwargs, **kwargs)\u001b[39m\n\u001b[32m    584\u001b[39m decoders = _resolve_decoders_kwargs(\n\u001b[32m    585\u001b[39m     decode_cf,\n\u001b[32m    586\u001b[39m     open_backend_dataset_parameters=backend.open_dataset_parameters,\n\u001b[32m   (...)\u001b[39m\u001b[32m    592\u001b[39m     decode_coords=decode_coords,\n\u001b[32m    593\u001b[39m )\n\u001b[32m    595\u001b[39m overwrite_encoded_chunks = kwargs.pop(\u001b[33m\"\u001b[39m\u001b[33moverwrite_encoded_chunks\u001b[39m\u001b[33m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[32m--> \u001b[39m\u001b[32m596\u001b[39m backend_ds = \u001b[43mbackend\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen_dataset\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    597\u001b[39m \u001b[43m    \u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    598\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdrop_variables\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdrop_variables\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    599\u001b[39m \u001b[43m    \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mdecoders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    600\u001b[39m \u001b[43m    \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    601\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    602\u001b[39m ds = _dataset_from_backend_dataset(\n\u001b[32m    603\u001b[39m     backend_ds,\n\u001b[32m    604\u001b[39m     filename_or_obj,\n\u001b[32m   (...)\u001b[39m\u001b[32m    615\u001b[39m     **kwargs,\n\u001b[32m    616\u001b[39m )\n\u001b[32m    617\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m ds\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/backends/h5netcdf_.py:502\u001b[39m, in \u001b[36mH5netcdfBackendEntrypoint.open_dataset\u001b[39m\u001b[34m(self, filename_or_obj, mask_and_scale, decode_times, concat_characters, decode_coords, drop_variables, use_cftime, decode_timedelta, format, group, lock, invalid_netcdf, phony_dims, decode_vlen_strings, driver, driver_kwds, storage_options)\u001b[39m\n\u001b[32m    499\u001b[39m emit_phony_dims_warning, phony_dims = _check_phony_dims(phony_dims)\n\u001b[32m    501\u001b[39m filename_or_obj = _normalize_filename_or_obj(filename_or_obj)\n\u001b[32m--> \u001b[39m\u001b[32m502\u001b[39m store = \u001b[43mH5NetCDFStore\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    503\u001b[39m \u001b[43m    \u001b[49m\u001b[43mfilename_or_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    504\u001b[39m \u001b[43m    \u001b[49m\u001b[38;5;28;43mformat\u001b[39;49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mformat\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m    505\u001b[39m \u001b[43m    \u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m=\u001b[49m\u001b[43mgroup\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    506\u001b[39m \u001b[43m    \u001b[49m\u001b[43mlock\u001b[49m\u001b[43m=\u001b[49m\u001b[43mlock\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    507\u001b[39m \u001b[43m    \u001b[49m\u001b[43minvalid_netcdf\u001b[49m\u001b[43m=\u001b[49m\u001b[43minvalid_netcdf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    508\u001b[39m \u001b[43m    \u001b[49m\u001b[43mphony_dims\u001b[49m\u001b[43m=\u001b[49m\u001b[43mphony_dims\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    509\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdecode_vlen_strings\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdecode_vlen_strings\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    510\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdriver\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdriver\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    511\u001b[39m \u001b[43m    \u001b[49m\u001b[43mdriver_kwds\u001b[49m\u001b[43m=\u001b[49m\u001b[43mdriver_kwds\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    512\u001b[39m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m=\u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    513\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    515\u001b[39m store_entrypoint = StoreBackendEntrypoint()\n\u001b[32m    517\u001b[39m ds = store_entrypoint.open_dataset(\n\u001b[32m    518\u001b[39m     store,\n\u001b[32m    519\u001b[39m     mask_and_scale=mask_and_scale,\n\u001b[32m   (...)\u001b[39m\u001b[32m    525\u001b[39m     decode_timedelta=decode_timedelta,\n\u001b[32m    526\u001b[39m )\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/backends/h5netcdf_.py:185\u001b[39m, in \u001b[36mH5NetCDFStore.open\u001b[39m\u001b[34m(cls, filename, mode, format, group, lock, autoclose, invalid_netcdf, phony_dims, decode_vlen_strings, driver, driver_kwds, storage_options)\u001b[39m\n\u001b[32m    183\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(filename, \u001b[38;5;28mstr\u001b[39m) \u001b[38;5;129;01mand\u001b[39;00m is_remote_uri(filename) \u001b[38;5;129;01mand\u001b[39;00m driver \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    184\u001b[39m     mode_ = \u001b[33m\"\u001b[39m\u001b[33mrb\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m mode == \u001b[33m\"\u001b[39m\u001b[33mr\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m mode\n\u001b[32m--> \u001b[39m\u001b[32m185\u001b[39m     filename = \u001b[43m_open_remote_file\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    186\u001b[39m \u001b[43m        \u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmode_\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m=\u001b[49m\u001b[43mstorage_options\u001b[49m\n\u001b[32m    187\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    189\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(filename, BytesIOProxy):\n\u001b[32m    190\u001b[39m     source = filename\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/xarray/backends/common.py:223\u001b[39m, in \u001b[36m_open_remote_file\u001b[39m\u001b[34m(file, mode, storage_options)\u001b[39m\n\u001b[32m    218\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mfsspec\u001b[39;00m\n\u001b[32m    220\u001b[39m fs, _, paths = fsspec.get_fs_token_paths(\n\u001b[32m    221\u001b[39m     file, mode=mode, storage_options=storage_options\n\u001b[32m    222\u001b[39m )\n\u001b[32m--> \u001b[39m\u001b[32m223\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfs\u001b[49m\u001b[43m.\u001b[49m\u001b[43mopen\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpaths\u001b[49m\u001b[43m[\u001b[49m\u001b[32;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmode\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/fsspec/spec.py:1338\u001b[39m, in \u001b[36mAbstractFileSystem.open\u001b[39m\u001b[34m(self, path, mode, block_size, cache_options, compression, **kwargs)\u001b[39m\n\u001b[32m   1336\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m   1337\u001b[39m     ac = kwargs.pop(\u001b[33m\"\u001b[39m\u001b[33mautocommit\u001b[39m\u001b[33m\"\u001b[39m, \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m._intrans)\n\u001b[32m-> \u001b[39m\u001b[32m1338\u001b[39m     f = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_open\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   1339\u001b[39m \u001b[43m        \u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1340\u001b[39m \u001b[43m        \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1341\u001b[39m \u001b[43m        \u001b[49m\u001b[43mblock_size\u001b[49m\u001b[43m=\u001b[49m\u001b[43mblock_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1342\u001b[39m \u001b[43m        \u001b[49m\u001b[43mautocommit\u001b[49m\u001b[43m=\u001b[49m\u001b[43mac\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1343\u001b[39m \u001b[43m        \u001b[49m\u001b[43mcache_options\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcache_options\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1344\u001b[39m \u001b[43m        \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1345\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1346\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m compression \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m   1347\u001b[39m         \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mfsspec\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mcompression\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m compr\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/fsspec/implementations/http.py:376\u001b[39m, in \u001b[36mHTTPFileSystem._open\u001b[39m\u001b[34m(self, path, mode, block_size, autocommit, cache_type, cache_options, size, **kwargs)\u001b[39m\n\u001b[32m    374\u001b[39m kw.update(kwargs)\n\u001b[32m    375\u001b[39m info = {}\n\u001b[32m--> \u001b[39m\u001b[32m376\u001b[39m size = size \u001b[38;5;129;01mor\u001b[39;00m info.update(\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43minfo\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m) \u001b[38;5;129;01mor\u001b[39;00m info[\u001b[33m\"\u001b[39m\u001b[33msize\u001b[39m\u001b[33m\"\u001b[39m]\n\u001b[32m    377\u001b[39m session = sync(\u001b[38;5;28mself\u001b[39m.loop, \u001b[38;5;28mself\u001b[39m.set_session)\n\u001b[32m    378\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m block_size \u001b[38;5;129;01mand\u001b[39;00m size \u001b[38;5;129;01mand\u001b[39;00m info.get(\u001b[33m\"\u001b[39m\u001b[33mpartial\u001b[39m\u001b[33m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m):\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/fsspec/asyn.py:118\u001b[39m, in \u001b[36msync_wrapper.<locals>.wrapper\u001b[39m\u001b[34m(*args, **kwargs)\u001b[39m\n\u001b[32m    115\u001b[39m \u001b[38;5;129m@functools\u001b[39m.wraps(func)\n\u001b[32m    116\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mwrapper\u001b[39m(*args, **kwargs):\n\u001b[32m    117\u001b[39m     \u001b[38;5;28mself\u001b[39m = obj \u001b[38;5;129;01mor\u001b[39;00m args[\u001b[32m0\u001b[39m]\n\u001b[32m--> \u001b[39m\u001b[32m118\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43msync\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mloop\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/fsspec/asyn.py:103\u001b[39m, in \u001b[36msync\u001b[39m\u001b[34m(loop, func, timeout, *args, **kwargs)\u001b[39m\n\u001b[32m    101\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m FSTimeoutError \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mreturn_result\u001b[39;00m\n\u001b[32m    102\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(return_result, \u001b[38;5;167;01mBaseException\u001b[39;00m):\n\u001b[32m--> \u001b[39m\u001b[32m103\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m return_result\n\u001b[32m    104\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    105\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m return_result\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/fsspec/asyn.py:56\u001b[39m, in \u001b[36m_runner\u001b[39m\u001b[34m(event, coro, result, timeout)\u001b[39m\n\u001b[32m     54\u001b[39m     coro = asyncio.wait_for(coro, timeout=timeout)\n\u001b[32m     55\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m---> \u001b[39m\u001b[32m56\u001b[39m     result[\u001b[32m0\u001b[39m] = \u001b[38;5;28;01mawait\u001b[39;00m coro\n\u001b[32m     57\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m ex:\n\u001b[32m     58\u001b[39m     result[\u001b[32m0\u001b[39m] = ex\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/osdf-cookbook/lib/python3.12/site-packages/fsspec/implementations/http.py:450\u001b[39m, in \u001b[36mHTTPFileSystem._info\u001b[39m\u001b[34m(self, url, **kwargs)\u001b[39m\n\u001b[32m    447\u001b[39m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m exc:\n\u001b[32m    448\u001b[39m         \u001b[38;5;28;01mif\u001b[39;00m policy == \u001b[33m\"\u001b[39m\u001b[33mget\u001b[39m\u001b[33m\"\u001b[39m:\n\u001b[32m    449\u001b[39m             \u001b[38;5;66;03m# If get failed, then raise a FileNotFoundError\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m450\u001b[39m             \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mFileNotFoundError\u001b[39;00m(url) \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mexc\u001b[39;00m\n\u001b[32m    451\u001b[39m         logger.debug(\u001b[33m\"\u001b[39m\u001b[33m\"\u001b[39m, exc_info=exc)\n\u001b[32m    453\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m {\u001b[33m\"\u001b[39m\u001b[33mname\u001b[39m\u001b[33m\"\u001b[39m: url, \u001b[33m\"\u001b[39m\u001b[33msize\u001b[39m\u001b[33m\"\u001b[39m: \u001b[38;5;28;01mNone\u001b[39;00m, **info, \u001b[33m\"\u001b[39m\u001b[33mtype\u001b[39m\u001b[33m\"\u001b[39m: \u001b[33m\"\u001b[39m\u001b[33mfile\u001b[39m\u001b[33m\"\u001b[39m}\n\n\u001b[31mFileNotFoundError\u001b[39m: https://www.ncei.noaa.gov/thredds-ocean/dodsC/woa23/DATA/temperature/netcdf/decav/1.00/woa23_decav_t07_01.nc","ename":"FileNotFoundError","evalue":"https://www.ncei.noaa.gov/thredds-ocean/dodsC/woa23/DATA/temperature/netcdf/decav/1.00/woa23_decav_t07_01.nc"}],"key":"cnqZGsdZjg"}],"key":"qAkZVp82dN"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"5) Downloading external error map for the specific location.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"L1UGas658r"}],"identifier":"id-5-downloading-external-error-map-for-the-specific-location","label":"5) Downloading external error map for the specific location.","html_id":"id-5-downloading-external-error-map-for-the-specific-location","implicit":true,"key":"zwfZ202zHd"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Currently the error map comes from a fixed file; our plan is to switch to a dynamic AWS download that accepts location parameters.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"FeQ9sr9HuV"}],"key":"JuFQhzRKWz"}],"key":"taJnVHgM1X"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Downloading anomaly detection model error map from NCAR via OSDF\nresponse = requests.get('https://data-osdf.rda.ucar.edu/ncar/rda/pythia_2025/osdf-cookbook/mae_error_map.npy')\nresponse.raise_for_status()\nsonar_clusters = np.load(io.BytesIO(response.content))","key":"cjhNURY0tT"},{"type":"output","id":"H4qP5jM03lHH99vNAB5JK","data":[],"key":"lRXNIpSjaj"}],"key":"BQxgODznzM"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"O1x7hqSLXN"}],"key":"ZvSW0joYoE"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"6) Helper: mean Sv in dB","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OkTSY9SE4y"}],"identifier":"id-6-helper-mean-sv-in-db","label":"6) Helper: mean Sv in dB","html_id":"id-6-helper-mean-sv-in-db","implicit":true,"key":"Mbq2WHzndu"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Computes the mean of Sv correctly by converting dB → linear, averaging, then linear → dB.\nAccepts array-like input (NumPy/xarray/dask); returns a scalar in dB.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"N8lpXdywXJ"}],"key":"x8ZmSxG109"}],"key":"G1lD5P6fnf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def calculate_sv_mean(input_sv):\n    # Convert dB to linear, mean in linear space, convert back to dB\n    sv = 10. ** (input_sv / 10.)\n    return 10 * np.log10(np.mean(sv))","key":"YPUc3SP2E1"},{"type":"output","id":"D0t3O50lLECO4tgrd5syu","data":[],"key":"uVlukeenPI"}],"key":"jJTxddaCA1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"7) Group cruise data into hourly chunks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DWnOtyST0v"}],"identifier":"id-7-group-cruise-data-into-hourly-chunks","label":"7) Group cruise data into hourly chunks","html_id":"id-7-group-cruise-data-into-hourly-chunks","implicit":true,"key":"b7VlhCt0ld"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Adds an hourly label and groups the cruise data by hour.\nProduces a list of per-hour xarray.Dataset chunks for downstream aggregation.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"HF3D8yIu3D"}],"key":"Z0z3TGvOwg"}],"key":"MLWg8xZszA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cruise['time_hour'] = cruise['time'].dt.floor('1h')  # hourly bin label\n\n# Group by each hour\ngrouped = cruise.groupby('time_hour')\n\n# Extract each 1-hour Dataset as a chunk (drop helper label)\nchunks = [group.drop_vars('time_hour') for _, group in grouped]","key":"vTEg5FOrTe"},{"type":"output","id":"jNAExaaThjDeFwDNqQJDm","data":[],"key":"OTKXrJZzDj"}],"key":"j6zv4n39BG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"8) Compute hourly mean Sv and attach to env_df","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lg5Y7CswlV"}],"identifier":"id-8-compute-hourly-mean-sv-and-attach-to-env-df","label":"8) Compute hourly mean Sv and attach to env_df","html_id":"id-8-compute-hourly-mean-sv-and-attach-to-env-df","implicit":true,"key":"rffj489hPT"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Iterates over hourly chunks, computes mean Sv per hour using calculate_sv_mean.\nConverts dask→NumPy→Python float and appends to a list.\nAssigns the resulting hourly series to env_df[“sv_hourly”].\nAssumes the number/order of hours matches rows retained in env_df.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ieSn0FQ94N"}],"key":"nyFFMhHvln"}],"key":"qUk5tozkBd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sv_hourly = []\ntimestamps = []\n\nfor i in range(0, len(chunks)):\n    sv_data = chunks[i]['Sv']\n    result = calculate_sv_mean(sv_data)\n\n    # Use first time in hour as representative timestamp\n    ts = pd.to_datetime(chunks[i]['time'].values[0])\n    result = result.compute()  # dask -> numpy\n    result = float(result.values)  # numpy -> Python float\n\n    sv_hourly.append(result)\n\nenv_df[\"sv_hourly\"] = sv_hourly","key":"Fs9J9087M0"},{"type":"output","id":"Gbbx7qCGl7Yq2VkV_9iGH","data":[],"key":"KrOQrnW3bC"}],"key":"wd1K51y45h"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"9) Build (depth × time) error-map DataFrame and align timestamps","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iqmGlszZbB"}],"identifier":"id-9-build-depth-time-error-map-dataframe-and-align-timestamps","label":"9) Build (depth × time) error-map DataFrame and align timestamps","html_id":"id-9-build-depth-time-error-map-dataframe-and-align-timestamps","implicit":true,"key":"qEHfR5Pte9"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Extracts one channel from sonar_clusters and pairs it with cruise depths and timestamps to form a DataFrame.\nUses min(...) to guard against size mismatches in depth/time dimensions.\nAligns only the first and last timestamps in env_df to the heatmap’s time range (keeps interior indices unchanged, sets UTC).","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"G1Wbu4zOFF"}],"key":"T1o6AqE2RI"}],"key":"DxI0PliGt3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare axes\ndepths = np.asarray(cruise.depth.values)\ntimes = pd.to_datetime(hm_timestamps)\n\n# Select channel/slice from sonar_clusters\nvals = sonar_clusters[:, :, 1]  # (1088, 28096)\n\n# Guard against mismatched sizes\nn_depth = min(len(depths), vals.shape[0])\nn_time = min(len(times), vals.shape[1])\n\n# DataFrame: rows=depths, cols=timestamps\ndf = pd.DataFrame(\n    data=vals[:n_depth, :n_time],\n    index=depths[:n_depth],\n    columns=times[:n_time]\n)\n\n# Align env_df index endpoints to heatmap timestamps (keeps interior unchanged)\nidx = env_df.index.tolist()\ndf_timestamps = pd.to_datetime(df.columns).tz_localize(None)\nidx[0] = pd.Timestamp(df_timestamps.values[0], tz='UTC').floor(\"s\")\nidx[-1] = pd.Timestamp(df_timestamps.values[-1], tz='UTC').floor(\"s\")\nenv_df.index = idx","key":"ZqWviMPkbt"},{"type":"output","id":"U3B6waPqAuunQ_sAmoqSq","data":[],"key":"XGH5CzuQv1"}],"key":"FjVJQ46V7h"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"10) Data Visualization: Synchronized Lines + Heatmap","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zM5cZSvZMW"}],"identifier":"id-10-data-visualization-synchronized-lines-heatmap","label":"10) Data Visualization: Synchronized Lines + Heatmap","html_id":"id-10-data-visualization-synchronized-lines-heatmap","implicit":true,"key":"PKDg8UhTNB"}],"key":"KfJHIWJga0"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Plots synchronized data: top = time series from line_df; bottom = depth×time heatmap from heatmap_df.\nExpects line_df to have a DatetimeIndex (timezone-naive or converted).\nDepth axis is reversed (surface at top).\nSaves an interactive HTML file to the parent directory (correlations.html) and shows the figure if show=True.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HoDE3TU8N5"}],"key":"s258TXgB1l"}],"key":"QWFltp56jR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_synchronized_heatmaps_from_df(\n        heatmap_df: pd.DataFrame,\n        line_df: pd.DataFrame,\n        colorscale: str = \"Reds\",\n        show_markers: bool = False,\n        show: bool = False,\n):\n    if not isinstance(line_df.index, pd.DatetimeIndex):\n        raise TypeError(\"line_df must have a DatetimeIndex\")\n    line_df = line_df.copy()\n    if line_df.index.tz is not None:\n        line_df.index = line_df.index.tz_convert(None)\n\n    depths = np.asarray(heatmap_df.index)\n    heatmap_timestamps = pd.to_datetime(heatmap_df.columns)\n    z = heatmap_df.to_numpy()\n\n    n = len(line_df.columns)\n    fig = make_subplots(\n        rows=n + 1,\n        cols=1,\n        shared_xaxes=True,\n        vertical_spacing=0.02,\n        row_heights=[0.1] * n + [0.7],  # n small rows + large heatmap row\n    )\n\n    mode = \"lines+markers\" if show_markers else \"lines\"\n\n    # Define units for each variable\n    units = {\n        'sea_surface_temperature': '°C',\n        'elevation_deg': 'degrees',\n        'sv_hourly': 'dB'\n    }\n\n    for i, col in enumerate(line_df.columns, start=1):\n        fig.add_trace(\n            go.Scatter(x=line_df.index, y=line_df[col], name=str(col), mode=mode, showlegend=True),\n            row=i, col=1\n        )\n\n        # Add units as y-axis titles\n        unit = units.get(col, '')  # Default to empty string if variable not found\n        fig.update_yaxes(\n            title_text=unit,\n            row=i, col=1\n        )\n\n        if i < len(line_df.columns):\n            fig.update_xaxes(showticklabels=False, row=i, col=1)\n\n    fig.add_trace(\n        go.Heatmap(\n            z=z, x=heatmap_timestamps, y=depths, colorscale=colorscale,\n            zmin=np.nanmin(z), zmax=np.nanmax(z),\n            hovertemplate=\"t=%{x}<br>depth=%{y}<br>value=%{z}<extra></extra>\",\n        ),\n        row=n + 1, col=1\n    )\n    fig.update_yaxes(autorange=\"reversed\", row=n + 1, col=1, title_text=\"Depth\")\n\n    fig.update_layout(\n        margin=dict(l=40, r=40, t=60, b=40),  # Reduced left margin, increased top for legend\n        hovermode=\"x unified\",\n        template=\"plotly_white\",\n        # height=10 * n + 500,  # scale height with number of signals\n    )\n\n    # Enhanced horizontal legend positioning\n    fig.update_layout(\n        legend=dict(\n            orientation='h',\n            x=0,\n            y=1.02,\n            xanchor='left',\n            yanchor='bottom',\n            bgcolor='rgba(255,255,255,0.8)',\n            bordercolor='rgba(0,0,0,0.1)',\n            borderwidth=1\n        )\n    )\n\n    save_path = os.path.join(os.path.dirname(os.getcwd()), \"correlations.html\")\n    fig.write_html(save_path)\n    print(f\"Plot saved to: {save_path}\")\n    if show:\n        fig.show()\n    return fig\n# Uncomment this line in order to create the plot.\n# fig = plot_synchronized_heatmaps_from_df(heatmap_df=df, line_df=env_df)\n# fig.show()","key":"pdvc4Ksh38"},{"type":"output","id":"re3OTYIeVVNhytAZNVEdh","data":[],"key":"Ye5MD2FKmn"}],"key":"tsDGYDrL8b"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Because rendering the plot is computationally intensive and involves downloading approximately 1 GB of data, we present a static image of the result instead.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bphLrVt29i"}],"key":"gU2gIrxTvT"}],"key":"VTqinU2tgi"},{"type":"block","kind":"notebook-code","data":{"ExecuteTime":{"end_time":"2025-08-15T19:32:51.371053Z","start_time":"2025-08-15T19:32:51.362008Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"from IPython.display import Image, display\ndisplay(Image(filename='../images/sonarai_example.png'))","key":"z89eUEnPdI"},{"type":"output","id":"rpbSFbY649UtwyNx6xuSs","data":[],"key":"WriHRDiDS1"}],"key":"VSAtMVHDaa"}],"key":"XXnn5eAoSa"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Integrating sonar and buoy-based temperature data","url":"/notebooks/sonarai-foundations","group":"NOAA SONAR data examples"},"next":{"title":"PyCoGSS: Spectral Change Analysis of Arctic Water Tracks","url":"/notebooks/pycogss-foundations","group":"PYCOGSS examples"}}},"domain":"http://localhost:3000"}