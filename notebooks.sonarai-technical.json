{"version":2,"kind":"Notebook","sha256":"0aca457a99a1977ccdc7a13cb4230e7da5b01a079fce5ce6585619d9b030727b","slug":"notebooks.sonarai-technical","location":"/notebooks/04_SonarAI_Technical.ipynb","dependencies":[],"frontmatter":{"title":"SonarAI Technical Notebook","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Harsha R. Hampapura","given":"Harsha R.","family":"Hampapura"},"name":"Harsha R. Hampapura","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Brian Bockelman","given":"Brian","family":"Bockelman"},"name":"Brian Bockelman","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Alexander Hoelzeman","given":"Alexander","family":"Hoelzeman"},"name":"Alexander Hoelzeman","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Carrie Wall","given":"Carrie","family":"Wall"},"name":"Carrie Wall","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Emma Turetsky","given":"Emma","family":"Turetsky"},"name":"Emma Turetsky","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Amandha Wingert Barok","given":"Amandha Wingert","family":"Barok"},"name":"Amandha Wingert Barok","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Aashish Panta","given":"Aashish","family":"Panta"},"name":"Aashish Panta","id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Riley Conroy","given":"Riley","family":"Conroy"},"name":"Riley Conroy","id":"contributors-myst-generated-uid-7"},{"nameParsed":{"literal":"Douglas Schuster","given":"Douglas","family":"Schuster"},"name":"Douglas Schuster","id":"contributors-myst-generated-uid-8"},{"nameParsed":{"literal":"Justin Hiemstra","given":"Justin","family":"Hiemstra"},"name":"Justin Hiemstra","id":"contributors-myst-generated-uid-9"},{"nameParsed":{"literal":"Joanmarie Del Vecchio","given":"Joanmarie Del","family":"Vecchio"},"name":"Joanmarie Del Vecchio","id":"contributors-myst-generated-uid-10"},{"nameParsed":{"literal":"Kibiwott Koech","given":"Kibiwott","family":"Koech"},"name":"Kibiwott Koech","id":"contributors-myst-generated-uid-11"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/osdf-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/osdf-cookbook/blob/main/notebooks/04_SonarAI_Technical.ipynb","exports":[{"format":"ipynb","filename":"04_SonarAI_Technical.ipynb","url":"/osdf-cookbook/build/04_SonarAI_Technical-81ad05d41547217dbd43dcddc3342d89.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Notebook Structure","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kUpSO766D4"}],"identifier":"notebook-structure","label":"Notebook Structure","html_id":"notebook-structure","implicit":true,"key":"zeHAPwpihI"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This notebook walks through an end-to-end workflow to relate shipboard sonar backscatter (Sv) to local environmental conditions. We (1) open EK60 data from a public NOAA S3 Zarr, (2) gather co-located environmental variables from OISST and IOOS ERDDAP, (3) compute hourly mean Sv, (4) assemble a depth×time error map for reference, and (5) synchronize timestamps to produce an interactive line-plus-heatmap visualization. All selections (time/depth/frequency) and conversions are kept explicit for reproducibility.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OXZREMwAId"}],"key":"EzIfCPQdPk"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mWmCyT4Pq8"}],"key":"twygAmweVt"},{"type":"text","value":"\nLoad core libraries for data access (xarray, s3fs), analysis (numpy, pandas), plotting (plotly), and I/O.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"DATPIljaUF"}],"key":"sT07p2WVPT"}],"key":"zKLfJb8Mqp"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Initializing the datasets","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"B2uC0kjcm9"}],"key":"LW88gRWATn"},{"type":"text","value":"\nAccess HB1906 EK60 Zarr data from public S3; subset by time/depth, select 38 kHz, and mask bins below bottom.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"CKgDbpftHa"}],"key":"U0xoQOD5fb"}],"key":"y1Vf7NiDXY"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Access buoy data","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"qGNlpODrv9"}],"key":"pc11J83oRc"},{"type":"text","value":"\nDefine Georges Bank buoy coordinates, sample daily OISST SST at the nearest grid cell (±1 day), and download the model error map (","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"jC70hKTi8m"},{"type":"inlineCode","value":".npy","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"dxJAFRKX3A"},{"type":"text","value":").","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"u21zFM1DSW"}],"key":"OXFkVpdcEq"}],"key":"KyE5O0txiX"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Downloading external error map for the specific location","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"lsouxsf8GC"}],"key":"GNj1TCZaxi"},{"type":"text","value":"\nDownloading the error map comes from a fixed file","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"ZqJgXqMqvk"}],"key":"t9NCpMsu98"}],"key":"q0I81tVex5"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Helper Function: Mean Sv (dB)","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"dFaHMjQRPu"}],"key":"gKu1HwaiNU"},{"type":"text","value":"\nConvert Sv from dB→linear, compute mean, convert back to dB.","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"gtdVWQdunt"}],"key":"UAHJWXhUVT"}],"key":"AH2bPri5t0"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":20,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"strong","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Group Cruise Data into Hourly Chunks","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"ueO9uKWNcA"}],"key":"x7kT0OMNpw"},{"type":"text","value":"\nAdd an hourly label and split the EK60 dataset into per-hour ","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"LGqEzJTKIK"},{"type":"inlineCode","value":"xarray.Dataset","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"QO9yue0cFO"},{"type":"text","value":" chunks.","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"m6Uh4GdbrB"}],"key":"cccMWAFy4u"}],"key":"njkJai18o8"},{"type":"listItem","spread":true,"position":{"start":{"line":23,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":23,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"strong","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Compute Hourly Mean Sv & Attach to ","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"MtI3mnRRka"},{"type":"inlineCode","value":"env_df","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"i6ZaTbP8dj"}],"key":"J9S1XBXGjQ"},{"type":"text","value":"\nAggregate Sv per hour and append results as a new column in the environmental dataframe.","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"MNBmvyZAY0"}],"key":"QqG1HktMkV"}],"key":"RBjDjYKQas"},{"type":"listItem","spread":true,"position":{"start":{"line":26,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":26,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"strong","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Build Depth×Time Error-Map DataFrame & Align Timestamps","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"MNs7GiZUEk"}],"key":"HPwl6mhLbx"},{"type":"text","value":"\nConstruct a depth-by-time matrix from the error map, guard for size mismatches, and align ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"rRJGjND2iQ"},{"type":"inlineCode","value":"env_df","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"Hw0UUDQBAL"},{"type":"text","value":" endpoints to the heatmap timestamps.","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"aEuyITMJ6N"}],"key":"tG6cKC1eqj"}],"key":"y1eJfjg20N"},{"type":"listItem","spread":true,"position":{"start":{"line":29,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"strong","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Data Visualization: Synchronized Lines + Heatmap","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"Tre6vl3wSN"}],"key":"sQddMu3Zno"},{"type":"text","value":"\nPlot environmental time series above a depth×time heatmap with shared x-axis; save interactive HTML output.","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"yxEXSXTtlx"}],"key":"A37MUV3iMQ"}],"key":"xC8LYnYPoW"}],"key":"hOo6YL7lTV"}],"key":"WRrnUORTaO"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LxyFZNHoUg"}],"key":"kKcDhzix1h"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UCNK8Ov0LQ"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"KMPKdS8Dz1"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"This section was inspired by ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Cx6vin31U4"},{"type":"link","url":"https://github.com/alan-turing-institute/the-turing-way/blob/master/book/templates/chapter-template/chapter-landing-page.md","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"this template","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"juBLN640XN"}],"urlSource":"https://github.com/alan-turing-institute/the-turing-way/blob/master/book/templates/chapter-template/chapter-landing-page.md","data":{"kind":"file","org":"alan-turing-institute","repo":"the-turing-way","reference":"master","file":"book/templates/chapter-template/chapter-landing-page.md","raw":"https://raw.githubusercontent.com/alan-turing-institute/the-turing-way/master/book/templates/chapter-template/chapter-landing-page.md"},"internal":false,"protocol":"github","key":"fg5XEPAiQE"},{"type":"text","value":" of the wonderful ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"gf2upqk7Ai"},{"type":"link","url":"https://the-turing-way.netlify.app","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The Turing Way","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"cJVsQNeJJB"}],"urlSource":"https://the-turing-way.netlify.app","key":"ffNrCcQURl"},{"type":"text","value":" Jupyter Book.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"cVc9nvUMBy"}],"key":"Zma80eBO5u"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This notebook opens public NOAA EK60 Zarr data from S3, subsets by time/depth, reads daily OISST SST near a buoy, fetches ERDDAP environmental variables, computes hourly mean ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Z7p7B6LTOe"},{"type":"strong","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Sv","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"O0IStoLFpx"}],"key":"XlK4NcWRi1"},{"type":"text","value":" (dB), aligns with a depth×time error map, and renders synchronized line/heatmap plots.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"rZPr9xS88V"}],"key":"XwNaedSRSS"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Label the importance of each concept explicitly as ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"SH0OF6ZYfX"},{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"helpful/necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Jy5oVZOo3X"}],"key":"a02OsHMDsX"},{"type":"text","value":".","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"BPGw7cpQLx"}],"key":"lus6DUYsEB"},{"type":"table","position":{"start":{"line":8,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"XtfsLTF3dM"}],"key":"ApQRNmLrjr"},{"type":"tableCell","header":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"vPpuzPo9Ns"}],"key":"iC2yNaZ0CX"},{"type":"tableCell","header":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"TQg27NiwXj"}],"key":"oNfkCBs98S"}],"key":"cKITFVaCKR"},{"type":"tableRow","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Xarray + Zarr basics","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"FJDG6ElSXL"}],"key":"UelRbyoKTC"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"tRRxRAggrk"}],"key":"JPrEvttLwN"}],"key":"WzQCEtZZwk"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Opening Zarr stores, selecting by coords/dims, ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"dICmW6y4Yk"},{"type":"inlineCode","value":".compute()","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"d46Bk4otK8"},{"type":"text","value":" semantics","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"fSLHNcpRfc"}],"key":"rrqmhsR4sG"}],"key":"P6abXILmfh"},{"type":"tableRow","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"s3fs & public S3 access","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"uX1YpDYWh4"}],"key":"xulVptlIIv"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"strong","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"RmprFOCqKX"}],"key":"o6NDxx8wZ8"}],"key":"V9Wvi1AR6G"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Anonymous reads from AWS S3 (","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"KrbwYI2qaj"},{"type":"inlineCode","value":"anon=True","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"PES6rGaQN0"},{"type":"text","value":")","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"yaGOi1dtwi"}],"key":"MYgQPZxLo0"}],"key":"Enz4GBpDIv"},{"type":"tableRow","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Pandas time series","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"H0ZATBR5S0"}],"key":"OjxuwD7pDW"},{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"strong","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"fsz6uyeyCV"}],"key":"wrTllM4LLg"}],"key":"bGVtF3ZCDq"},{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"inlineCode","value":"DatetimeIndex","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"COqkQ6nBm3"},{"type":"text","value":", sorting, filtering, timezone-naive vs. aware","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"zk6SkxoHBQ"}],"key":"eko3u89nZ5"}],"key":"EOvw9zWSLD"},{"type":"tableRow","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"NumPy fundamentals","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"oMgpOCFPbv"}],"key":"XR7RcLNt7R"},{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"strong","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"AsM0qU8S8V"}],"key":"RwnNJRdevg"}],"key":"y6ks9ZfMzq"},{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Array slicing, stats, type conversion","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"qPuK2qP1hq"}],"key":"Bz7y9sTEm7"}],"key":"XUY6VVtHVr"},{"type":"tableRow","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Acoustic backscatter (Sv) & dB averaging","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"AMGB3QW27d"}],"key":"HQMa8l2e6G"},{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"ouqHoK8DzV"}],"key":"bscNuHwb64"}],"key":"Ed0uS7kaFV"},{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Convert dB→linear, mean, then linear→dB, Understanding results","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"QffO4kYFzN"}],"key":"bVz6oVlPMS"}],"key":"EDGOQTIeGj"},{"type":"tableRow","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"ERDDAP tabledap & info endpoints","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"D0Rkjh7sIz"}],"key":"IuUHNtJA06"},{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"strong","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"RVEkTaZVKh"}],"key":"qgpNE0aIdG"}],"key":"FIrskAQ8tW"},{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Reading CSV responses; unit metadata lookup","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"Y7O0MCLD1p"}],"key":"TtCwDIFETZ"}],"key":"yR8WJnFHU9"},{"type":"tableRow","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Plotly fundamentals","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"gAErRw0Nvo"}],"key":"X3coNOhsxk"},{"type":"tableCell","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"WHHStur4gJ"}],"key":"pfg0S36N9u"}],"key":"rRcM0lXUDG"},{"type":"tableCell","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Subplots, heatmaps, interactive HTML export","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"pEo6iJyXGr"}],"key":"zIQTjh1VDT"}],"key":"OtLigsZeUl"},{"type":"tableRow","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Understanding of NetCDF/CF","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"iCopML1eT8"}],"key":"br33Rfc3U6"},{"type":"tableCell","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"XkFE0DVR7g"}],"key":"ub3tEiHm7W"}],"key":"n5SIfq62jf"},{"type":"tableCell","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Variable metadata and geospatial conventions","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"KAPHhqQqaH"}],"key":"qmfyEbKiA8"}],"key":"L1CjSi902A"},{"type":"tableRow","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Dask awareness","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"FMz2lxPehw"}],"key":"OoYTBYz7AK"},{"type":"tableCell","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"strong","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"llZSTdbDyR"}],"key":"yQ1KBs0sQS"}],"key":"Dgd00I9Xre"},{"type":"tableCell","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Lazy arrays; when/why to call ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"NVRiMDrt5f"},{"type":"inlineCode","value":".compute()","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"kob7cg3cpk"}],"key":"tSachC5n3S"}],"key":"nIBfiDl53Y"},{"type":"tableRow","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Geographic coordinates","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"fOWNFhgz2n"}],"key":"RIibj1Oevd"},{"type":"tableCell","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"strong","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"qnAULNk6Ok"}],"key":"Mvsk4BUfss"}],"key":"UCBvjLy53l"},{"type":"tableCell","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"0–360 vs. −180–180 longitude handling","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"kFAb2ev1xd"}],"key":"AEmjSvJby3"}],"key":"n6IIRA8yhK"},{"type":"tableRow","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"HTTP/IO with ","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"mYlPMb7Ez0"},{"type":"inlineCode","value":"requests","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"gYZQYd3qKk"}],"key":"IwfmhSy6Ki"},{"type":"tableCell","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"strong","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"S8foHyv3HL"}],"key":"iE4UkL9frg"}],"key":"rIiT4h7a0S"},{"type":"tableCell","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Downloading ","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"XImfqaWy6M"},{"type":"inlineCode","value":".npy","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"pPSXJeb5fQ"},{"type":"text","value":" assets for local use","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"G7efu2mGAm"}],"key":"io83Ok2zVC"}],"key":"dyKsdpHfLX"}],"key":"o6rb9KtBAV"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":22,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":22,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"strong","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"GtibYHiuIJ"}],"key":"FEr6AyBqPw"},{"type":"text","value":": ~75 minutes","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"BRKlUaZUpI"}],"key":"X4YATQ5XtH"}],"key":"CcbRLfHDKX"},{"type":"listItem","spread":true,"position":{"start":{"line":24,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"strong","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"System requirements","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"S2Yy8FbKbc"}],"key":"pOFqKQjYb6"},{"type":"text","value":":","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"WnqbwGoO61"}],"key":"Lc9fvbzNtf"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":25,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"Python 3.9+ with Jupyter Notebook/Lab","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"sMWdfIgVrX"}],"key":"pL9IDgUZtf"},{"type":"listItem","spread":true,"position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Required packages: ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"lTFz95PurV"},{"type":"inlineCode","value":"xarray","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"WZDB9axVz6"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"AQ0wZuimoC"},{"type":"inlineCode","value":"s3fs","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"fm8M6KxJNJ"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"KrBRe8f7qW"},{"type":"inlineCode","value":"numpy","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"ZGDPeCTmq1"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"bmFiGVISy5"},{"type":"inlineCode","value":"pandas","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"EniWQPT3It"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"lxtlzDjQgU"},{"type":"inlineCode","value":"plotly","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"c2NyWHRuEi"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"nQlLqi0mCD"},{"type":"inlineCode","value":"requests","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"zZV2p0Z8Sp"},{"type":"text","value":", ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"L0Zt9VhNrs"},{"type":"inlineCode","value":"netCDF4","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"G2geAT37mi"},{"type":"text","value":" ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"ugSUewY6QP"},{"type":"emphasis","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"(optional but helpful: ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"kEcJmZnmdI"},{"type":"inlineCode","value":"dask","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"JUyE4v7tz8"},{"type":"text","value":")","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"lZejGwRjwo"}],"key":"H3AsMkr7X9"}],"key":"wgu034Nj8R"}],"key":"ysmB9XZSz4"}],"key":"Bc1ID1HFfq"}],"key":"AndMTB9m4K"}],"key":"eup1aHIppD"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TF35bGWJEk"}],"key":"LA4nYMMbYH"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1) Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bwIKNyWr7i"}],"identifier":"id-1-imports","label":"1) Imports","html_id":"id-1-imports","implicit":true,"key":"SDQLIfIqCP"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Core libraries used throughout the notebook.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"gAYBMMqDGa"}],"key":"tF8yxLyK9V"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Key roles:","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"nT6Ijz6HIk"}],"key":"bGklOkIzvw"},{"type":"code","lang":"","value":"xarray/s3fs for reading NOAA Zarr data from S3\nnumpy/pandas for arrays & tables\nplotly for interactive plotting\nrequests/io/os for file I/O and downloads\ndatetime for time calculations","position":{"start":{"line":6,"column":1},"end":{"line":10,"column":1}},"key":"Sq8WwQgCUD"}],"key":"ldLnSM8O6p"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import xarray as xr\nimport s3fs\nimport numpy as np\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport pandas as pd\nimport requests\nimport io\nimport os\nfrom datetime import datetime, timedelta","key":"EBKMUr5VOy"},{"type":"output","id":"5KCfbkkKbjowTn5rX7iSg","data":[],"key":"dlFQXJ6QGW"}],"key":"qVN4zyF74s"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2) Initializing the datasets","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"se6Rklwpgh"}],"identifier":"id-2-initializing-the-datasets","label":"2) Initializing the datasets","html_id":"id-2-initializing-the-datasets","implicit":true,"key":"VJylELkppR"}],"key":"A0KGhOREmD"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Builds the S3 path to the HB1906 EK60 Zarr dataset and opens it anonymously.\nSubsets by time window and depth range, selects the 38 kHz channel, and masks samples below the estimated bottom.\n.compute() materializes the selection; hm_timestamps will be reused for time alignment later. All datasets are accessed\nusing the OSDF infrastructure","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"A0ycWOz673"}],"key":"SayYGt1gT6"}],"key":"InwBRbvkMe"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"bucket_name = 'noaa-wcsd-zarr-pds'\nship_name = \"Henry_B._Bigelow\"\ncruise_name = \"HB1906\"\nsensor_name = \"EK60\"\n\n# Accessing the NOAA HB1906 dataset using OSDF (anonymous S3)\ns3_file_system = s3fs.S3FileSystem(anon=True)\nzarr_store = f'{cruise_name}.zarr'\ns3_zarr_store_path = f\"{bucket_name}/level_2/{ship_name}/{cruise_name}/{sensor_name}/{zarr_store}\"\n\n# Map S3 path to a zarr store and open (consolidated=None to let xarray infer metadata)\nstore = s3fs.S3Map(root=s3_zarr_store_path, s3=s3_file_system, check=False)\ncruise = xr.open_zarr(store=store, consolidated=None)\n\n# Time/depth subset and single-frequency selection\nstart_time = \"2019-10-16T15:00:00\"\nend_time = \"2019-10-16T23:30:00\"\ntimeslice = slice(start_time, end_time)\ndepths=slice(10, 250)\ncruise = cruise.sel(time=timeslice, depth=depths, drop=False)\ncruise = cruise.sel(frequency=38000, method='nearest').compute()  # materialize after selection\ncruise = cruise.where(cruise.depth < cruise.bottom, drop=True)    # remove bins below bottom\n\n# Timestamps for later alignment\nhm_timestamps = cruise.time.values.tolist()","key":"diUhXOrDyK"},{"type":"output","id":"DG_0IbIR5ScNfFGO1N2rO","data":[],"key":"raRsXm6IEq"}],"key":"uoOoPm3QBw"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"3) Accessing buoy data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BhnWcPy66D"}],"identifier":"id-3-accessing-buoy-data","label":"3) Accessing buoy data","html_id":"id-3-accessing-buoy-data","implicit":true,"key":"py54N7usnD"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Defines a buoy location on Georges Bank (longitude converted to 0–360).","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Zlp4iG7QtJ"}],"key":"LlFGgawf19"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Optional: Loads three daily OISST files and samples SST at the nearest grid point (day before, day of, day after).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"eOse1Dmbyo"}],"key":"ILBGlbb7LB"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"ERDDAP buoy environmental data.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"mFHID8rpsk"}],"key":"MTAa37AHQG"}],"key":"JV1gb75jwA"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Sets ERDDAP dataset parameters and enforces a max_days cap by adjusting end_date_time if needed.\nReads station metadata to extract lon/lat and wind-speed units; prepares a conversion to knots.\nPulls a table of time, wind_speed, SST, significant wave height, converts wind speed to knots, indexes by time.\nFilters to the requested window and keeps the first nine rows (intentional truncation for later alignment).","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"k7BHiYyI8p"}],"key":"xyHmLh2gWC"}],"key":"PHkVl1y5O1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Location of one specific buoy located on Georges Bank\ntarget_lon = 360 - 66.546  # convert from -180..180 to 0..360\ntarget_lat = 41.088\n\n# ______________OPTIONAL BUOY DATA FROM NCAR/UCAR______________\n# print(f\"Target coordinates: Longitude: {target_lon}, Latitude: {target_lat}\")\n#\n# # Accessing stationary buoy data (daily OISST files); select nearest grid cell\n# buoy_data_day_before = xr.open_dataset(\n#     'https://data.rda.ucar.edu/d277007/avhrr_v2.1/2019/oisst-avhrr-v02r01.20191015.nc#mode=bytes', engine='netcdf4')\n# buoy_data_actual_day = xr.open_dataset(\n#     'https://data.rda.ucar.edu/d277007/avhrr_v2.1/2019/oisst-avhrr-v02r01.20191016.nc#mode=bytes',\n#     engine='netcdf4')\n# buoy_data_day_after = xr.open_dataset(\n#     'https://data.rda.ucar.edu/d277007/avhrr_v2.1/2019/oisst-avhrr-v02r01.20191017.nc#mode=bytes',\n#     engine='netcdf4')\n#\n# sst_day_before = buoy_data_day_before['sst'].sel(lon=target_lon, lat=target_lat, method='nearest').values[0][0]\n# sst_actual_day = buoy_data_actual_day['sst'].sel(lon=target_lon, lat=target_lat, method='nearest').values[0][0]\n# sst_day_after = buoy_data_day_after['sst'].sel(lon=target_lon, lat=target_lat, method='nearest').values[0][0]\n# ______________________________________________________________\n\n# The following code has been copied from https://github.com/ioos/soundcoop/blob/main/3_HMD_environmental_data/plot_sound_environmental_and_climatology_data.ipynb in order to access buoy environmental data.\n\nerddap_dataset = 'gov-ndbc-44005'\nsound_dataset = 'Monh'\nmax_days = 25\nstart_date_time = '2019-10-16T14:00:00.000'\nend_date_time = '2021-10-16T23:30:00.000'\nmin_frequency = 21\nmax_frequency = 24000\n\nerddap_base_url = 'https://erddap.sensors.ioos.us/erddap'\n\n# Cap the end date if requested range exceeds max_days\ntime_delta = datetime.fromisoformat(end_date_time) - datetime.fromisoformat(start_date_time)\nif time_delta.days > max_days:\n    end_date_time = str(datetime.fromisoformat(start_date_time) + timedelta(days=max_days))\n    print(f'end_date_time updated to {end_date_time}')\n\n# Get station lon/lat and units from ERDDAP metadata (CSV)\nerddap_metadata_url = f'{erddap_base_url}/info/{erddap_dataset}/index.csv'\nenv_metadata_df = pd.read_csv(erddap_metadata_url)\n\nenv_station_x = env_metadata_df.loc[env_metadata_df['Attribute Name'] == 'geospatial_lon_min']['Value'].item()\nenv_station_y = env_metadata_df.loc[env_metadata_df['Attribute Name'] == 'geospatial_lat_min']['Value'].item()\n\n# Determine wind_speed units to convert to knots\nwind_speed_units_row = env_metadata_df[\n    (env_metadata_df['Row Type'] == 'attribute') &\n    (env_metadata_df['Attribute Name'] == 'units') &\n    (env_metadata_df['Variable Name'] == 'wind_speed')\n    ]\nwind_speed_units = wind_speed_units_row.iloc[0]['Value']\nprint(wind_speed_units)\n\nwind_speed_to_kts_factors = {\n    \"m.s-1\": 1.94384,\n    \"mph\": 0.86897423357831,\n    \"kmh\": 0.53995555554212126825,\n    \"ft.s-1\": 0.59248243198521155506\n}\n\nif wind_speed_units in wind_speed_to_kts_factors:\n    print(\"Success! Units can be converted from\", wind_speed_units, 'to', 'kts')\nelse:\n    print(\"Error! Wind speed cannot be converted from\", wind_speed_units, 'to', 'kts')\n\nwind_var = 'wind_speed'\nswt_var = 'sea_surface_temperature'\nwave_var = 'sea_surface_wave_significant_height'\nanomaly_var = 'swt_anomaly'\nwind_var_kts = 'wind_speed_kts'\n\n# Build ERDDAP tabledap query URL\nerddap_dataset_url = (\n    f'{erddap_base_url}/tabledap/{erddap_dataset}.csv'\n    f'?time,{wind_var},{swt_var},{wave_var}'\n)\n\n# Read dataset (skip the second row of units)\nenv_df = pd.read_csv(\n    erddap_dataset_url,\n    skiprows=[1]  # The second row (index 1) are the column units, which we don't need\n)\n\n# Format time, convert wind speed to knots, index by time\nenv_df['time'] = pd.to_datetime(env_df['time'])\nenv_df['wind_speed_kts'] = env_df['wind_speed'].apply(lambda x: x * wind_speed_to_kts_factors[wind_speed_units])\ndel env_df['wind_speed']\nenv_df = env_df.set_index('time').sort_index()\n\n# Filter by requested time window and keep first 9 rows (drops the rest)\nenv_df = env_df[(env_df.index > start_date_time) & (env_df.index < end_date_time)]\nenv_df.drop(env_df.tail(-9).index,inplace=True)\n# env_df","key":"pK38kvHLUC"},{"type":"output","id":"pQA0Y78eVNo3-w8udtMZf","data":[{"output_type":"stream","name":"stdout","text":"end_date_time updated to 2019-11-10 14:00:00\n"},{"output_type":"stream","name":"stdout","text":"m.s-1\nSuccess! Units can be converted from m.s-1 to kts\n"}],"key":"PzqiF21FsB"}],"key":"hX95T3k7sN"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"4) Downloading external error map for the specific location.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uwksNxuuO6"}],"identifier":"id-4-downloading-external-error-map-for-the-specific-location","label":"4) Downloading external error map for the specific location.","html_id":"id-4-downloading-external-error-map-for-the-specific-location","implicit":true,"key":"Hj1CA0kaHf"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Currently the error map comes from a fixed file; our plan is to switch to a dynamic AWS download that accepts location parameters.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"gFruy35vs9"}],"key":"vUCpGyKQAk"}],"key":"ehXF3J4iVV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Downloading anomaly detection model error map from NCAR via OSDF\nresponse = requests.get('https://data-osdf.rda.ucar.edu/ncar/rda/pythia_2025/osdf-cookbook/mae_error_map.npy')\nresponse.raise_for_status()\nerror_map = np.load(io.BytesIO(response.content))","key":"KKQwdZhsHQ"},{"type":"output","id":"jgUlJqK1PTSLjHKkqJjYq","data":[],"key":"GuczjvIqFQ"}],"key":"QCTn6aGY0q"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pAWKT3nEja"}],"key":"UcQ7oiDHz4"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"5) Helper: mean Sv in dB","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YmBGwN3z79"}],"identifier":"id-5-helper-mean-sv-in-db","label":"5) Helper: mean Sv in dB","html_id":"id-5-helper-mean-sv-in-db","implicit":true,"key":"XoORIqr1D5"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Computes the mean of Sv correctly by converting dB → linear, averaging, then linear → dB.\nAccepts array-like input (NumPy/xarray/dask); returns a scalar in dB.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"C2YVMOAd98"}],"key":"tElg7BUCdP"}],"key":"UvQ6XeQS3L"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def calculate_sv_mean(input_sv):\n    # Convert dB to linear, mean in linear space, convert back to dB\n    sv = 10. ** (input_sv / 10.)\n    return 10 * np.log10(np.mean(sv))","key":"SoidKSL2Kb"},{"type":"output","id":"McGWsLpMbR92b0ApQacQW","data":[],"key":"uNyWNwJyor"}],"key":"Q4Vpwe8L2n"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"6) Group cruise data into hourly chunks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zU6xWgbZNV"}],"identifier":"id-6-group-cruise-data-into-hourly-chunks","label":"6) Group cruise data into hourly chunks","html_id":"id-6-group-cruise-data-into-hourly-chunks","implicit":true,"key":"rwX5zAKqYq"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Adds an hourly label and groups the cruise data by hour.\nProduces a list of per-hour xarray.Dataset chunks for downstream aggregation.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"hl7BZkBDNp"}],"key":"FxsgRGfD6U"}],"key":"aleEk7TBid"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cruise['time_hour'] = cruise['time'].dt.floor('1h')  # hourly bin label\n\n# Group by each hour\ngrouped = cruise.groupby('time_hour')\n\n# Extract each 1-hour Dataset as a chunk (drop helper label)\nchunks = [group.drop_vars('time_hour') for _, group in grouped]","key":"OfTMYItdnW"},{"type":"output","id":"e4zkbjJiXWriLosfG_Dy2","data":[],"key":"XGeXn6n6yA"}],"key":"a6RYzHxDIs"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"7) Compute hourly mean Sv and attach to env_df","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YPRgFNhhvO"}],"identifier":"id-7-compute-hourly-mean-sv-and-attach-to-env-df","label":"7) Compute hourly mean Sv and attach to env_df","html_id":"id-7-compute-hourly-mean-sv-and-attach-to-env-df","implicit":true,"key":"HnmqyMSI3L"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Iterates over hourly chunks, computes mean Sv per hour using calculate_sv_mean.\nConverts dask→NumPy→Python float and appends to a list.\nAssigns the resulting hourly series to env_df[“sv_hourly”].\nAssumes the number/order of hours matches rows retained in env_df.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"DwHLMMmx0Y"}],"key":"P4fxx5CckQ"}],"key":"n2KOgyxarD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"sv_hourly = []\ntimestamps = []\n\nfor i in range(0,len(chunks)):\n    sv_data = chunks[i]['Sv']\n    result = calculate_sv_mean(sv_data)\n\n    # Use first time in hour as representative timestamp\n    ts = pd.to_datetime(chunks[i]['time'].values[0])\n    result = result.compute()           # dask -> numpy\n    result = float(result.values)       # numpy -> Python float\n\n    sv_hourly.append(result)\n\nenv_df[\"sv_hourly\"] = sv_hourly","key":"HxflAp4ug1"},{"type":"output","id":"yEtEDc5-cjcN7_4cfDrS9","data":[],"key":"MBJckch3n2"}],"key":"QdtkBlEHh1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"8) Build (depth × time) error-map DataFrame and align timestamps","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"biYttskhzH"}],"identifier":"id-8-build-depth-time-error-map-dataframe-and-align-timestamps","label":"8) Build (depth × time) error-map DataFrame and align timestamps","html_id":"id-8-build-depth-time-error-map-dataframe-and-align-timestamps","implicit":true,"key":"sULcUhqSAa"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Extracts one channel from error_map and pairs it with cruise depths and timestamps to form a DataFrame.\nUses min(...) to guard against size mismatches in depth/time dimensions.\nAligns only the first and last timestamps in env_df to the heatmap’s time range (keeps interior indices unchanged, sets UTC).","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"VSeONIR5f4"}],"key":"BOdvBblNj6"}],"key":"rT6JKHI2uR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Prepare axes\ndepths = np.asarray(cruise.depth.values)\ntimes  = pd.to_datetime(hm_timestamps)\n\n# Select channel/slice from error_map\nvals = error_map[:, :, 1]  # (1088, 28096)\n\n# Guard against mismatched sizes\nn_depth = min(len(depths), vals.shape[0])\nn_time  = min(len(times),  vals.shape[1])\n\n# DataFrame: rows=depths, cols=timestamps\ndf = pd.DataFrame(\n    data=vals[:n_depth, :n_time],\n    index=depths[:n_depth],\n    columns=times[:n_time]\n)\n\n# Align env_df index endpoints to heatmap timestamps (keeps interior unchanged)\nidx = env_df.index.tolist()\ndf_timestamps = pd.to_datetime(df.columns).tz_localize(None)\nidx[0] = pd.Timestamp(df_timestamps.values[0], tz='UTC').floor(\"s\")\nidx[-1] = pd.Timestamp(df_timestamps.values[-1], tz='UTC').floor(\"s\")\nenv_df.index = idx","key":"bnBZiha59Q"},{"type":"output","id":"IJwOeaJkeosKtZkCwhsdf","data":[],"key":"Th0mfKEQQt"}],"key":"DPpzZrQHg0"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"9) Data Visualization: Synchronized Lines + Heatmap","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"btqFRl3bFv"}],"identifier":"id-9-data-visualization-synchronized-lines-heatmap","label":"9) Data Visualization: Synchronized Lines + Heatmap","html_id":"id-9-data-visualization-synchronized-lines-heatmap","implicit":true,"key":"YQ3VIt0Tjd"}],"key":"nH6ilcK2Cz"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Plots synchronized data: top = time series from line_df; bottom = depth×time heatmap from heatmap_df.\nExpects line_df to have a DatetimeIndex (timezone-naive or converted).\nDepth axis is reversed (surface at top).\nSaves an interactive HTML file to the parent directory (out.html) and shows the figure if show=True.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Rrq62Z2YUg"}],"key":"ucJWxB8L1U"}],"key":"AUeaKg2eJD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def plot_synchronized_heatmaps_from_df(\n    heatmap_df: pd.DataFrame,  # rows = depths, columns = timestamps\n    line_df: pd.DataFrame,\n    colorscale: str = \"Reds\",\n    show_markers: bool = False,\n    show: bool = False,\n):\n    # --- Validate line_df ---\n    if not isinstance(line_df.index, pd.DatetimeIndex):\n        raise TypeError(\"line_df must have a DatetimeIndex\")\n    line_df = line_df.copy()\n    if line_df.index.tz is not None:\n        line_df.index = line_df.index.tz_convert(None)\n\n    # --- Extract axis values from heatmap_df ---\n    depths = np.asarray(heatmap_df.index)\n    heatmap_timestamps = pd.to_datetime(heatmap_df.columns)\n    z = heatmap_df.to_numpy()\n\n    # --- Build figure ---\n    fig = make_subplots(\n        rows=2,\n        cols=1,\n        shared_xaxes=True,\n        vertical_spacing=0.03,\n        row_heights=[0.3, 0.7]  # smaller line plot, bigger heatmap\n    )\n\n    # Top panel: line plots\n    mode = \"lines+markers\" if show_markers else \"lines\"\n    for col in line_df.columns:\n        fig.add_trace(\n            go.Scatter(\n                x=line_df.index,\n                y=line_df[col],\n                name=str(col),\n                mode=mode\n            ),\n            row=1, col=1\n        )\n\n    # Bottom panel: heatmap\n    fig.add_trace(\n        go.Heatmap(\n            z=z,\n            x=heatmap_timestamps,\n            y=depths,\n            colorscale=colorscale,\n            zmin=np.nanmin(z),\n            zmax=np.nanmax(z),\n            colorbar_len=0.28,\n            colorbar_y=0.14,\n            hovertemplate=\"t=%{x}<br>depth=%{y}<br>value=%{z}<extra></extra>\",\n        ),\n        row=2, col=1\n    )\n\n    fig.update_yaxes(autorange=\"reversed\", row=2, col=1, title_text=\"Depth\")\n    fig.update_layout(\n        legend_title_text=\"Signals\",\n        margin=dict(l=60, r=40, t=40, b=40),\n        hovermode=\"x unified\",\n        template=\"plotly_white\",\n        height=700\n    )\n\n    # Save/show\n    save_path = os.path.join(os.path.dirname(os.getcwd()), \"out.html\")  # saves HTML in parent dir\n    fig.write_html(save_path)\n    print(f\"Plot saved to: {save_path}\")\n    if show:\n        fig.show()\n\n    return fig\n\n# Create synchronized line+heatmap figure\nfig = plot_synchronized_heatmaps_from_df(heatmap_df=df, line_df=env_df, show=True)\n\n# fig.show()","key":"Jo29aPvTg0"},{"type":"output","id":"b5WWNbY3t7XIr-MsFIgsK","data":[{"output_type":"stream","name":"stdout","text":"Plot saved to: /home/runner/work/osdf-cookbook/osdf-cookbook/out.html\n"},{"output_type":"display_data","metadata":{},"data":{"application/vnd.plotly.v1+json":{"content_type":"application/vnd.plotly.v1+json","hash":"bd769bde022e393b87d20e82baceff58","path":"/osdf-cookbook/build/bd769bde022e393b87d20e82baceff58.json"}}}],"key":"mAhpi56Ly5"}],"key":"mRAEdLa7gs"}],"key":"VxUcdpOrkf"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Integrating sonar and buoy-based temperature data","url":"/notebooks/sonarai-foundations","group":"NOAA SONAR data examples"},"next":{"title":"Use the GeoJSON file to get the Area of Interest and query the STAC catalog for items","url":"/notebooks/pycogss-spectral-change","group":"PYCOGSS examples"}}},"domain":"http://localhost:3000"}