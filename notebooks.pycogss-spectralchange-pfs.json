{"version":2,"kind":"Notebook","sha256":"bbd7ec6115e3eac557bcd77815ca71dd291170514730206850cdb67fd0ded49d","slug":"notebooks.pycogss-spectralchange-pfs","location":"/notebooks/05_PyCoGSS_SpectralChange_PFS.ipynb","dependencies":[],"frontmatter":{"title":"PyCoGSS: Spectral Change Analysis of Arctic Water Tracks","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Harsha R. Hampapura","given":"Harsha R.","family":"Hampapura"},"name":"Harsha R. Hampapura","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Brian Bockelman","given":"Brian","family":"Bockelman"},"name":"Brian Bockelman","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Alexander Hoelzeman","given":"Alexander","family":"Hoelzeman"},"name":"Alexander Hoelzeman","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Carrie Wall","given":"Carrie","family":"Wall"},"name":"Carrie Wall","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Emma Turetsky","given":"Emma","family":"Turetsky"},"name":"Emma Turetsky","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Amandha Wingert Barok","given":"Amandha Wingert","family":"Barok"},"name":"Amandha Wingert Barok","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Aashish Panta","given":"Aashish","family":"Panta"},"name":"Aashish Panta","id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Riley Conroy","given":"Riley","family":"Conroy"},"name":"Riley Conroy","id":"contributors-myst-generated-uid-7"},{"nameParsed":{"literal":"Douglas Schuster","given":"Douglas","family":"Schuster"},"name":"Douglas Schuster","id":"contributors-myst-generated-uid-8"},{"nameParsed":{"literal":"Justin Hiemstra","given":"Justin","family":"Hiemstra"},"name":"Justin Hiemstra","id":"contributors-myst-generated-uid-9"},{"nameParsed":{"literal":"Joanmarie Del Vecchio","given":"Joanmarie Del","family":"Vecchio"},"name":"Joanmarie Del Vecchio","id":"contributors-myst-generated-uid-10"},{"nameParsed":{"literal":"Kibiwott Koech","given":"Kibiwott","family":"Koech"},"name":"Kibiwott Koech","id":"contributors-myst-generated-uid-11"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/osdf-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"source_url":"https://github.com/projectpythia/osdf-cookbook/blob/main/notebooks/05_PyCoGSS_SpectralChange_PFS.ipynb","edit_url":"https://github.com/projectpythia/osdf-cookbook/edit/main/notebooks/05_PyCoGSS_SpectralChange_PFS.ipynb","thumbnail":"/osdf-cookbook/build/pycogss-logo-cd759e4daa05366b302f33421d064daa.png","exports":[{"format":"ipynb","filename":"05_PyCoGSS_SpectralChange_PFS.ipynb","url":"/osdf-cookbook/build/05_PyCoGSS_SpectralC-e81ffa0a9c09caacb00c3576704db8d1.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"image","url":"/osdf-cookbook/build/pycogss-logo-cd759e4daa05366b302f33421d064daa.png","alt":"PyCoGSS logo","width":"300px","align":"center","key":"Q3MC2odTfG","urlSource":"../thumbnails/pycogss-logo.png"}],"key":"CRpKSVuOzY"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Section 1: Data access through PelicanFS and OSDF","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mteiRF7pID"}],"identifier":"section-1-data-access-through-pelicanfs-and-osdf","label":"Section 1: Data access through PelicanFS and OSDF","html_id":"section-1-data-access-through-pelicanfs-and-osdf","implicit":true,"key":"MEsDhGum6K"}],"key":"vn6np4gL5f"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HdZ8yFWOcW"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"KlEQ4T4KuQ"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"This notebook provides an example of a scientific use-case of the PelicanFS framework by accessing data to be analyzed through federated OSDF caches. We use this data to analyze spectral changes of water tracks in a small area of interest in the Arctic. In this analysis we calculate NDVI index which we use to infer the greening and browning trends of the water tracks in the summer months as permafrost thaws.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"TgwffXp8JH"}],"key":"uyMBGgaxsN"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"We build a dataset from a catalog of open-access Sentinel-2 data from the Amazon Web Service (AWS). Normally, we would access this open data from AWS each time we need to run or re-run our analysis, and each time we would be making requests to the AWS servers. Given the vast spatial, temporal and spectral scale of the satellite data  we use for our analysis, retrieving data can be time and resource costly depending on the infrastructure or network context from which we are performing our computation.  With PelicanFS, we can reduce data acquisition times by performing our catalog search on OSDF federated caches. Additionally, when possible PelicanFS caches data that was previously unavailable in the OSDF cache so that next time we would be able to retrieve it from the cache. Ultimately, we expect that accessing data through PelicanFS will improve the overall time complexity of our analysis workflows.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Wj1J90f3FZ"}],"key":"wGEncDy5ge"}],"key":"JWcLNUR7M0"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YuogPsSs5j"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"QQsrBkmnoN"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"To better understand this notebook, please familiarize yourself with the following concepts:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jkujF0nvwQ"}],"key":"RjTSZCfjrx"},{"type":"table","position":{"start":{"line":5,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"wVXPl4hpQ5"}],"key":"jRSz1ahbQz"},{"type":"tableCell","header":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YBgpETIgDu"}],"key":"XPW2f6u85a"},{"type":"tableCell","header":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"lrvK3tTwxu"}],"key":"egPB2sME86"}],"key":"y9aDnSleOI"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"http://projectpythia.org/osdf-cookbook/notebooks/osdf-intro/","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to OSDF","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"rrbWrU1ycW"}],"urlSource":"http://projectpythia.org/osdf-cookbook/notebooks/osdf-intro/","key":"L9dBe4ZN3b"}],"key":"y53C19Ff8G"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Recommended","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"vW2p0Ya0Yf"}],"key":"L5Vobx1lxV"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Overview of OSDF","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"RMfMebX53z"}],"key":"nQlYGXPtMw"}],"key":"QbhsI0HnqX"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://filesystem-spec.readthedocs.io/en/latest/","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Overview of FSSpec","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"RZGahy4kRE"}],"urlSource":"https://filesystem-spec.readthedocs.io/en/latest/","key":"QRJAeFq4Cd"}],"key":"JwYOPJET04"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"d05hB36siD"}],"key":"HGdjA93ShL"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"To better understand the FSSpec library","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"vH9c01h5GV"}],"key":"LDkHBK12Sp"}],"key":"N2rTLiCr6l"},{"type":"tableRow","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/xarray/","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Overview of Python xarrays","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"hl00NHvnEt"}],"urlSource":"https://foundations.projectpythia.org/core/xarray/","key":"G8ANZPTmwy"}],"key":"TtFEVHUql0"},{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"YvP4cNfxyi"}],"key":"v66wtyt6Ef"},{"type":"tableCell","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"An introduction to data manipulation using Xarray DataArrays and Datasets","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"xcl7PwmEJy"}],"key":"c6SZjodNXc"}],"key":"X7uEahO646"},{"type":"tableRow","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"link","url":"https://stacspec.org/en","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Working with STAC catalogs","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"JhbzIUZ44J"}],"urlSource":"https://stacspec.org/en","key":"wcLiBavIEc"}],"key":"ecKTPMT3N4"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"BB9Q11uE4Z"}],"key":"qixfQTUHqF"},{"type":"tableCell","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"An overview of SpatioTemporal Asset Catalog (STAC) catalogs for spatial data","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"KXkhpgJCxN"}],"key":"OK3IDfdVBZ"}],"key":"X1w4LIhy9p"},{"type":"tableRow","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"link","url":"https://stackstac.readthedocs.io/en/latest/","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Spatial STAC catalogs as xarray data structures","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"CAUy2F93vH"}],"urlSource":"https://stackstac.readthedocs.io/en/latest/","key":"WsdHPhSUm5"},{"type":"text","value":"; ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"b3MAsrw46D"},{"type":"link","url":"https://pystac-client.readthedocs.io/en/stable/","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Working with STAC catalogs in Python","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"z7aQz5zQRL"}],"urlSource":"https://pystac-client.readthedocs.io/en/stable/","key":"CONt9KYxua"}],"key":"RJxr7O0gKf"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"WcJodGs14T"}],"key":"TBipqYRD72"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Efficient computation of spatial raster data as STAC catalogs and xarray data structure in Python","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"BHw10dnKMN"}],"key":"vCDlQNG1Pf"}],"key":"nV5icnBeop"}],"key":"JZusuDPkI7"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"paragraph","children":[{"type":"strong","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"gcTK3Ullu8"}],"key":"k25CHqtccd"},{"type":"text","value":": 30-45 minutes","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"F09OPz4qEU"}],"key":"rgmYepndbS"}],"key":"ywE3Vc80Vk"}],"key":"THTBG3tqTD"}],"key":"pvtATx0p9l"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UkynaGdaYi"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"xzgPA57qcR"}],"key":"nRO1TJItJJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from pelicanfs.core import PelicanFileSystem, PelicanMap,OSDFFileSystem \n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport xarray as xr\nimport numpy as np\nimport urllib\n\nimport geopandas as gpd\nimport pystac_client \nimport stackstac\nimport rasterio\nimport shapely","key":"Hawb92e6KK"},{"type":"output","id":"PO7-3R-1uILyPUoXRn0Tv","data":[],"key":"GTSpLSC7YZ"}],"key":"ZMYP6kQDCb"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Build a STAC catalog of Sentinel-2 data from AWS","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"h1VklPJKMe"}],"identifier":"build-a-stac-catalog-of-sentinel-2-data-from-aws","label":"Build a STAC catalog of Sentinel-2 data from AWS","html_id":"build-a-stac-catalog-of-sentinel-2-data-from-aws","implicit":true,"key":"AeLXoUAMtl"}],"key":"WRvMM4oc9U"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Here, we begin by building a catalog of Sentinel-2 data that we will access from AWS. The data will be in form of  When we query our catalog, we obtain SPEC metadata objects which we will process further through the PySTAC library. As we see below, our catalog search returned 104 items, where item is a Sentinel-2 scene and take [cite, provide more info for S2 scenes, takes?] matching our AOI for June-October 2020.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DVKTz6ovDm"}],"key":"YkYdDVQYzZ"}],"key":"CXd0DvI8A9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"\n# build a geometry of AOI from these coordinate bounds\naoiBounds = (134.66615966473387,  66.82737559988661, 134.72162967387277, 66.85380494758718)\naoiGeom = shapely.geometry.box(*aoiBounds)\nlon, lat = 134.70071475239416, 66.84143426792251\n\nstartDate      = '2020-06'\nendDate       = '2020-08'\n# cloudCovMaxPct = 5\n\ncatalogURL = 'https://earth-search.aws.element84.com/v1'\nsearch = pystac_client.Client.open(catalogURL).search(collections=['sentinel-2-l2a'],\n                                                      # bbox=aoiGeom.bounds,\n                                                      datetime=f'{startDate}/{endDate}',\n                                                      intersects=dict(type=\"Point\", coordinates=(lon, lat)),\n                                                      # query={'eo:cloud_cover': {'lt': cloudCovMaxPct}}\n                                                        )\n\n\n# Get all matching items\nitems = list(search.items())\nprint(f'Found {len(items)} matching items.')","key":"ZRqG192ivU"},{"type":"output","id":"sgP-Rz7nBN_Ji8holjGzZ","data":[{"output_type":"stream","name":"stdout","text":"Found 104 matching items.\n"}],"key":"sHafuSIOR1"}],"key":"eJBgQNB2wd"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Pointing STAC catalog to OSDF caches","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jEEuchdRto"}],"identifier":"pointing-stac-catalog-to-osdf-caches","label":"Pointing STAC catalog to OSDF caches","html_id":"pointing-stac-catalog-to-osdf-caches","implicit":true,"key":"NoaVkUS5zo"}],"key":"jclLBdARB6"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now is the time to utilize the capabilities of Pelican File System (PelicanFS) and OSDF caches. Remember that our STAC catalog contains metadata of our data. As mentioned above, each of the 104 items in our catalog is a Sentinel-2 scene for a particular timestamp matching our AOI. We can look up one of the items from the catalog to see its metadata.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LlMihZK3yU"}],"key":"o5Umk8FfxN"}],"key":"dRdL3x2UBz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(items[0].properties)","key":"l8dqT70LKB"},{"type":"output","id":"7tfYAcCmO81AlRVJjHwN4","data":[{"output_type":"stream","name":"stdout","text":"{'created': '2023-09-11T15:41:31.053Z', 'platform': 'sentinel-2a', 'constellation': 'sentinel-2', 'instruments': ['msi'], 'eo:cloud_cover': 99.918234, 'mgrs:utm_zone': 53, 'mgrs:latitude_band': 'W', 'mgrs:grid_square': 'MQ', 'grid:code': 'MGRS-53WMQ', 'view:sun_azimuth': 172.641943803281, 'view:sun_elevation': 31.2265921212202, 's2:degraded_msi_data_percentage': 0.054, 's2:nodata_pixel_percentage': 87.71764, 's2:saturated_defective_pixel_percentage': 0, 's2:dark_features_percentage': 0.005051, 's2:cloud_shadow_percentage': 0.076015, 's2:vegetation_percentage': 0, 's2:not_vegetated_percentage': 0.000513, 's2:water_percentage': 0.000189, 's2:unclassified_percentage': 0, 's2:medium_proba_clouds_percentage': 11.694589, 's2:high_proba_clouds_percentage': 88.215214, 's2:thin_cirrus_percentage': 0.008428, 's2:snow_ice_percentage': 0, 's2:product_type': 'S2MSI2A', 's2:processing_baseline': '05.00', 's2:product_uri': 'S2A_MSIL2A_20200831T023551_N0500_R089_T53WMQ_20230318T225127.SAFE', 's2:generation_time': '2023-03-18T22:51:27.000000Z', 's2:datatake_id': 'GS2A_20200831T023551_027113_N05.00', 's2:datatake_type': 'INS-NOBS', 's2:datastrip_id': 'S2A_OPER_MSI_L2A_DS_S2RP_20230318T225127_S20200831T023553_N05.00', 's2:granule_id': 'S2A_OPER_MSI_L2A_TL_S2RP_20230318T225127_A027113_T53WMQ_N05.00', 's2:reflectance_conversion_factor': 0.980196377542162, 'datetime': '2020-08-31T02:39:02.945000Z', 's2:sequence': '1', 'earthsearch:s3_path': 's3://sentinel-cogs/sentinel-s2-l2a-cogs/53/W/MQ/2020/8/S2A_53WMQ_20200831_1_L2A', 'earthsearch:payload_id': 'roda-sentinel2/workflow-sentinel2-to-stac/0ec51ea6bb5ad08ed2ea1b04baa16351', 'earthsearch:boa_offset_applied': True, 'processing:software': {'sentinel2-to-stac': '0.1.1'}, 'updated': '2023-09-11T15:41:31.053Z', 'proj:code': 'EPSG:32653'}\n"}],"key":"Orr9xKSGRD"}],"key":"rAogM5FyIx"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can peek further to see where the “assets” of this particular item is store by looking for its URL. As expected the URL points to a AWS bucket somewhere. This checks out, because out STAC catalog is build from Sentinel-2 data store in AWS.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xqlOzEB25A"}],"key":"BXDU6eapZE"}],"key":"g4CWCE3jOB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"items[0].assets['nir'].href","key":"G9RInFqc5T"},{"type":"output","id":"oFE9A--Q_sI3Fvbvr_orr","data":[{"output_type":"execute_result","execution_count":4,"metadata":{},"data":{"text/plain":{"content":"'https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2020/8/S2A_53WMQ_20200831_1_L2A/B08.tif'","content_type":"text/plain"}}}],"key":"rJG6c9lgKj"}],"key":"SHJPevIKzZ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Remember we are trying to access our data through PelicanFS, which will hopefully point us to an OSDF cache instead of AWS. If PelicanFS were able to do that, then the URL above would point to an OSDF network of cache resource in some non-AWS server. Now we will prepare to access our data through PelicanFS by first telling PelicanFS where to find Sentinel-2 data in AWS, i.e. pointing it to Sentinel-2 data namespace in AWS. This creates a kind of file path to where OSDF caches data. We will have to do this for each asset URL as seen in the example above. Here is an example of how a new constructed OSDF path from an Asset URL looks like:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nq2VmmX63J"}],"key":"MCwQMUUsSw"}],"key":"r8QfM8kDCd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def getOSDFPath(url,AWSRegion='us-west-2'):\n    \"\"\"\n    Constructs an OSDF path from an asset's original URL.\n\n    Parameters:\n    - url: URL to convert.\n\n    Returns:\n    - OSDF path.\n    \"\"\"\n    \n    return f'/aws-opendata/{AWSRegion}/sentinel-cogs{urllib.parse.urlparse(url).path}'\n","key":"DqeByyTmTR"},{"type":"output","id":"7u_bMf1_hW4PcCC8IgRYN","data":[],"key":"bSq4mGmW4k"}],"key":"YpAEmSkuFn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"getOSDFPath(items[0].assets['nir'].href)","key":"dTAZ2KgQxZ"},{"type":"output","id":"zBBvAtaD4wsNwyL7o8vbq","data":[{"output_type":"execute_result","execution_count":6,"metadata":{},"data":{"text/plain":{"content":"'/aws-opendata/us-west-2/sentinel-cogs/sentinel-s2-l2a-cogs/53/W/MQ/2020/8/S2A_53WMQ_20200831_1_L2A/B08.tif'","content_type":"text/plain"}}}],"key":"MOIjsVvOJS"}],"key":"deyT4W8bcJ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now let’s try accessing this asset through PelicanFS, and opening the retrieved GeoTIFF file using Rasterio.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KWeGyitTJt"}],"key":"yvM7g0Gf4b"}],"key":"Qot6H2Elj8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\npelFS = PelicanFileSystem('pelican://osg-htc.org')\n\nAWSRegionLst = ['us-east-1','us-east-2','us-central-1','us-central-2','us-west-1','us-west-2']\nbandUrl = getOSDFPath(items[1].assets['nir'].href, 'us-west-2')\nbandDS = rasterio.open(bandUrl, opener=pelFS)\nbandDS.close()","key":"NFvCUsUt6m"},{"type":"output","id":"kl2euFwAOCEgfRDPDVKnZ","data":[{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stdout","text":"CPU times: user 162 ms, sys: 46.7 ms, total: 209 ms\nWall time: 8.03 s\n"}],"key":"PnGdCAhHBy"}],"key":"OyQwZYqLGa"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"So we are able to read the raster through the PelicanFS using Rasterio. Let’s probe further to see which OSDF caches PelicanFS is routing us to!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OM52Ind0kP"}],"key":"UVpr26sOmc"}],"key":"AvebzYPuUf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pelFS._access_stats.get_responses(bandUrl)[0][-1].access_path","key":"UdmCbjf5Am"},{"type":"output","id":"uEg0lsrj6j3tl9lSwBJ00","data":[{"output_type":"execute_result","execution_count":8,"metadata":{},"data":{"text/plain":{"content":"'https://dtn-pas.kans.nrp.internet2.edu:8443/aws-opendata/us-west-2/sentinel-cogs/sentinel-s2-l2a-cogs/53/W/MQ/2020/8/S2A_53WMQ_20200831_0_L2A/B08.tif'","content_type":"text/plain"}}}],"key":"PJAm7aklPO"}],"key":"Btq3NCxmoX"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we’ll pull a small trick and try to find out which OSDF resource PelicanFS found the cache, i.e. our raster file. This is helpful for us, because now we can easily point PelicanFS to this OSDF resource for all items in our catalog. Why are we doing this? We see from the two cells above that reading a single item’s asset takes ~8 second. Since we have 104 items each with 3 assets (the Red, NIR and SCL bands), that means at least ~24 seconds for each item, and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YasXjqPOf8"},{"type":"inlineMath","value":"104 \\times 24 = 2496","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>104</mn><mo>×</mo><mn>24</mn><mo>=</mo><mn>2496</mn></mrow><annotation encoding=\"application/x-tex\">104 \\times 24 = 2496</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">104</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">24</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2496</span></span></span></span>","key":"TCmSkccubI"},{"type":"text","value":" for all items in our catalog. About 42 minutes in total, with potential additional network overhead time costs!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JLouJtdbMh"}],"key":"Vy9C7IsQye"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Now we will point all the URLs in our cache to ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tQeMNvni42"},{"type":"inlineCode","value":" https://osdf1.newy32aoa.nrp.internet2.edu:8443","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Djh0UmQoYl"},{"type":"text","value":". We will also make a HTTP request to the new OSDF Cache URL and only point update our catalog with this new URL if the HTTP request is successful.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fPD1Jdbnev"}],"key":"ZqCIkqrJGs"}],"key":"El3n9RrDdN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\npelFS = PelicanFileSystem('pelican://osg-htc.org')\n\nitemsOSDFCache = items\nfor idx, item in enumerate(items): # start=1):\n    # print(f'Processing dataset #{idx}')\n\n    cacheCount = 0\n    for band in ['red','nir','scl']:\n        bandUrl = getOSDFPath(items[idx].assets[band].href)\n        \n        # takes too long to access cache through PelicanFS unfortunately\n        # we can do a sneak peak of one of the items to see the OSDF location \n        # from which PelicanFS finds its cache then point the rest of our catalog to it!\n        '''\n        bandDS = rasterio.open(bandUrl, opener=pelFS)\n        if pelFS._access_stats.get_responses(bandUrl)[1]:\n            osdfCachePath = pelFS._access_stats.get_responses(bandUrl)[0][-1].access_path\n            # print(f'cache for dataset #{idx} found in {osdfCachePath} \\n')\n            items[idx].assets[band].href = pelFS._access_stats.get_responses(bandUrl)[0][-1].access_path\n            cacheCount += 1\n        # close dataset!\n        bandDS.close()\n        '''\n        cacheOSDF = 'https://osdf1.newy32aoa.nrp.internet2.edu:8443'+bandUrl\n        with urllib.request.urlopen(cacheOSDF) as res:\n            if res.status == 200:\n                itemsOSDFCache[idx].assets[band].href = cacheOSDF\n            \n    \n    # print(f'{cacheCount} caches found for dataset #{idx} \\n')\n    ","key":"guBrJ4gP1b"},{"type":"output","id":"S8eFEijZRTMuj0gQe4Tw0","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 539 ms, sys: 119 ms, total: 658 ms\nWall time: 7.43 s\n"}],"key":"XNxOuLtKiM"}],"key":"jMVwMzlTLN"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Inspecting one of the items shows the that its assets point to the new OSDF URL!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iahiuX4mUa"}],"key":"smNO9Tr1GC"}],"key":"KXJV5PitwE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"items[23].assets['nir'].href","key":"Abl7o9MOaE"},{"type":"output","id":"od5qvsZWEHCrL8nMY5n35","data":[{"output_type":"execute_result","execution_count":10,"metadata":{},"data":{"text/plain":{"content":"'https://osdf1.newy32aoa.nrp.internet2.edu:8443/aws-opendata/us-west-2/sentinel-cogs/sentinel-s2-l2a-cogs/53/W/MQ/2020/8/S2A_53WMQ_20200811_0_L2A/B08.tif'","content_type":"text/plain"}}}],"key":"lSiUIkIkd3"}],"key":"XUDP6gOdlD"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Stacking STAC into lazy xarray objects","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"galK8DIZVr"}],"identifier":"stacking-stac-into-lazy-xarray-objects","label":"Stacking STAC into lazy xarray objects","html_id":"stacking-stac-into-lazy-xarray-objects","implicit":true,"key":"HQHTO7ik1t"}],"key":"Z0f6XbdtYd"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now is the time to turn our “OSDF catalog” into data that we can analyze. We’ll do so by using the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LE4Nyan2Qb"},{"type":"inlineCode","value":"stackstac","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yOWRHCSTif"},{"type":"text","value":" library to convert the STAC catalog to xarray data structures, and makes it possible to perform distributed computing with the help of dask. In any case, the resulting xarray data structures will be lazy, meaning that data is not loaded upfront, but only when needed. Because we have a large dataset [cite: compute size], lazy loading will be really helpful to optimize our resource usage.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cmvUKjTkTC"}],"key":"zZ2wil4ew3"}],"key":"lLEgCpfaE5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\ns2Stack = stackstac.stack(itemsOSDFCache, assets=['red', 'nir', 'scl'],\n                         bounds = aoiGeom.bounds,\n                          gdal_env=stackstac.DEFAULT_GDAL_ENV.updated(\n                               {'GDAL_HTTP_MAX_RETRY': 3,\n                                'GDAL_HTTP_RETRY_DELAY': 5,\n                               }),\n                          epsg=4326,\n                              #    chunksize=(1, 1, 50, 50) # Original - many small chunks bad for plotting\n                                 chunksize=(1, -1, 100, 100)\n                                ).rename(\n       {'x': 'lon', 'y': 'lat'}).to_dataset(dim='band')\ns2Stack","key":"u2upRNBshG"},{"type":"output","id":"70za7lawWbi-6nkTy3wVN","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 203 ms, sys: 12.9 ms, total: 216 ms\nWall time: 218 ms\n"},{"output_type":"execute_result","execution_count":11,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 872MB\nDimensions:                                  (time: 104, lat: 416, lon: 840,\n                                              band: 3)\nCoordinates: (12/51)\n  * time                                     (time) datetime64[ns] 832B 2020-...\n  * lat                                      (lat) float64 3kB 66.85 ... 66.83\n  * lon                                      (lon) float64 7kB 134.7 ... 134.7\n    id                                       (time) <U24 10kB 'S2A_53WMQ_2020...\n    s2:nodata_pixel_percentage               (time) object 832B 87.722188 ......\n    s2:dark_features_percentage              (time) object 832B 5.478115 ... ...\n    ...                                       ...\n    title                                    (band) <U30 360B 'Red (band 4) -...\n    raster:bands                             (band) object 24B None ... [{'no...\n    common_name                              (band) object 24B 'red' 'nir' None\n    center_wavelength                        (band) object 24B 0.665 0.842 None\n    full_width_half_max                      (band) object 24B 0.038 0.145 None\n    epsg                                     int64 8B 4326\nDimensions without coordinates: band\nData variables:\n    red                                      (time, lat, lon) float64 291MB dask.array<chunksize=(1, 100, 100), meta=np.ndarray>\n    nir                                      (time, lat, lon) float64 291MB dask.array<chunksize=(1, 100, 100), meta=np.ndarray>\n    scl                                      (time, lat, lon) float64 291MB dask.array<chunksize=(1, 100, 100), meta=np.ndarray>\nAttributes:\n    spec:           RasterSpec(epsg=4326, bounds=(134.66612907013848, 66.8273...\n    crs:            epsg:4326\n    transform:      | 0.00, 0.00, 134.67|\\n| 0.00,-0.00, 66.85|\\n| 0.00, 0.00...\n    resolution_xy:  (6.612317572720078e-05, 6.372865585874454e-05)","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"f73ada9cfdb034540169dd6d870286e0","path":"/osdf-cookbook/build/f73ada9cfdb034540169dd6d870286e0.html"}}}],"key":"nNpPRvcjSm"}],"key":"HLB0MuFLZy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Section 2: NDVI analysis of water tracks and inter-tracks","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TntXNbWvlH"}],"identifier":"section-2-ndvi-analysis-of-water-tracks-and-inter-tracks","label":"Section 2: NDVI analysis of water tracks and inter-tracks","html_id":"section-2-ndvi-analysis-of-water-tracks-and-inter-tracks","implicit":true,"key":"CtDF0Bormu"}],"key":"pNFQ9gR2Ni"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we can continue our analysis!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eyM50RE9pN"}],"key":"jYEF2V4bjA"}],"key":"TS2jnL9IOj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate NDVI","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Osady661TT"}],"identifier":"calculate-ndvi","label":"Calculate NDVI","html_id":"calculate-ndvi","implicit":true,"key":"OoXEjLlO8Y"}],"key":"aubI6yVvxh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"zeroMask = s2Stack['nir'] + s2Stack['red']\n\ns2Stack['ndvi'] = (s2Stack.where(zeroMask != 0, np.nan)['nir'] - s2Stack.where(zeroMask != 0, np.nan)['red'])/\\\n                        (s2Stack.where(zeroMask != 0, np.nan)['nir'] + s2Stack.where(zeroMask != 0, np.nan)['red'])\n\n# # Only keep ndvi and classification, but know you can save things like 'visible' or other fun rasters!\ns2Stack = s2Stack[['ndvi', 'scl']]\ns2Stack = s2Stack.drop_vars([c for c in s2Stack.coords if not (c in ['time', 'lat', 'lon'])])\ns2Stack","key":"StZs26fvKq"},{"type":"output","id":"U0JKJTS79HBHQDtZ2NnAv","data":[{"output_type":"execute_result","execution_count":12,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 581MB\nDimensions:  (time: 104, lat: 416, lon: 840)\nCoordinates:\n  * time     (time) datetime64[ns] 832B 2020-06-02T02:39:04.253000 ... 2020-0...\n  * lat      (lat) float64 3kB 66.85 66.85 66.85 66.85 ... 66.83 66.83 66.83\n  * lon      (lon) float64 7kB 134.7 134.7 134.7 134.7 ... 134.7 134.7 134.7\nData variables:\n    ndvi     (time, lat, lon) float64 291MB dask.array<chunksize=(1, 100, 100), meta=np.ndarray>\n    scl      (time, lat, lon) float64 291MB dask.array<chunksize=(1, 100, 100), meta=np.ndarray>\nAttributes:\n    spec:           RasterSpec(epsg=4326, bounds=(134.66612907013848, 66.8273...\n    crs:            epsg:4326\n    transform:      | 0.00, 0.00, 134.67|\\n| 0.00,-0.00, 66.85|\\n| 0.00, 0.00...\n    resolution_xy:  (6.612317572720078e-05, 6.372865585874454e-05)","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"7533ae818391a7207751f353746ca58c","path":"/osdf-cookbook/build/7533ae818391a7207751f353746ca58c.html"}}}],"key":"H8GjpTLEwv"}],"key":"AL5XpFJPrh"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Test on the centroid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QE1uYGl9Zd"}],"identifier":"test-on-the-centroid","label":"Test on the centroid","html_id":"test-on-the-centroid","implicit":true,"key":"r23nDkjUhI"}],"key":"SORKTnqbWa"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\ns2Point = s2Stack.interp(lat=lat, lon=lon,method='nearest')\n\ns2Df = s2Point.to_dataframe()\ns2DfFilt = s2Df[(s2Df['scl'] == 4) | (s2Df['scl'] == 5)]\n\nfig, ax = plt.subplots()\ns2DfFilt['ndvi'].plot(label='unfiltered',\n                      marker='o', \n                      # linestyle='--',\n                      markersize=2, ax=ax)\nax.set_ylim(-1.0,5.0)\nplt.show()","key":"XNIHdDgIXW"},{"type":"output","id":"agIYe1Mj0otzeSNlCNkvR","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"2b3a47c91c49a2e243343755da51a0e6","path":"/osdf-cookbook/build/2b3a47c91c49a2e243343755da51a0e6.png"}}},{"output_type":"stream","name":"stdout","text":"CPU times: user 22.3 s, sys: 1.1 s, total: 23.4 s\nWall time: 15.1 s\n"}],"key":"qpJAoW0blq"}],"key":"aHAS4xS2lk"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Fascinating. What happened in late July, early August 2020? Let’s take a look at an asset from the collection during that time period.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sv7KeuI38E"}],"key":"DD6D0dBLGD"}],"key":"wBPM4LF3TT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pics = {}\nfrom datetime import datetime\nfor item in items:\n    item_dict = {}\n    item_dict['date'] = item.properties['datetime']\n    item_dict['pic'] = item.assets['visual'].href\n    item_dict['thumb'] = item.assets['thumbnail'].href\n    pics[item.id] = item_dict","key":"CwC5nMZf0O"},{"type":"output","id":"VcOfsF4Q1U6PXAvWyrT4j","data":[],"key":"F3l3iXsgLq"}],"key":"kxKWHw99OH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\nfrom rasterio.plot import show\nwith rasterio.open(pics['S2A_53WMQ_20200804_1_L2A']['pic']) as dataset:\n    show(dataset)","key":"ih6BH0vWXg"},{"type":"output","id":"4zfgqbP-urGEPKLjhXqgR","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"4b3ff7c54ce3a4f6d696457995991ae9","path":"/osdf-cookbook/build/4b3ff7c54ce3a4f6d696457995991ae9.png"}}},{"output_type":"stream","name":"stdout","text":"CPU times: user 6.86 s, sys: 1.04 s, total: 7.91 s\nWall time: 19.7 s\n"}],"key":"foUuzt5Sau"}],"key":"PEAcvop0CV"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"That’ll do it! (this is a fire burning the larch forests of the eastern Siberia taiga)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JGbZY9wpPi"}],"key":"MIVbZ15PCk"}],"key":"WFMlI3LeuX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot the whole stack?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a1Wbdi5dQp"}],"identifier":"plot-the-whole-stack","label":"Plot the whole stack?","html_id":"plot-the-whole-stack","implicit":true,"key":"URgy8kv8RQ"}],"key":"TFgTCRSDr0"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mosaic by date","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jbb4Ner67x"}],"identifier":"mosaic-by-date","label":"Mosaic by date","html_id":"mosaic-by-date","implicit":true,"key":"n4UTTaCxTc"}],"key":"aXuvHhAdh9"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"s2StackMosaic = s2Stack.groupby('time.date').median(dim='time')\n# s2StackMosaic = sentinel_stack_mosaicked.rename({'date': 'time'})\n# sentinel_stack_mosaicked['time'] = sentinel_stack_mosaicked['time'].astype('datetime64[ns]')","key":"HTlH28qvgE"},{"type":"output","id":"3U81j1N5kZkCVq2Eu-p8d","data":[],"key":"brH90gSXpq"}],"key":"XIyeu4swlW"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Day of year makes it easier for a linear trend analysis!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aGZJCzuv3G"}],"key":"Lh1Y1rlJFr"}],"key":"AkFzVriSPW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"day_of_year = xr.DataArray(\n    s2StackMosaic['date'].astype('datetime64[ns]').dt.dayofyear,\n    coords={'date': s2StackMosaic['date']},\n    dims='date',\n    name='day_of_year'\n)\n\ns2StackMosaic = s2StackMosaic.assign_coords({'day_of_year': day_of_year})\ns2StackMosaic","key":"GpZFZaFJSh"},{"type":"output","id":"RDmA4T48v55rb3VmsAswI","data":[{"output_type":"execute_result","execution_count":17,"metadata":{},"data":{"text/plain":{"content":"<xarray.Dataset> Size: 302MB\nDimensions:      (date: 54, lat: 416, lon: 840)\nCoordinates:\n  * date         (date) object 432B 2020-06-02 2020-06-03 ... 2020-08-31\n  * lat          (lat) float64 3kB 66.85 66.85 66.85 66.85 ... 66.83 66.83 66.83\n  * lon          (lon) float64 7kB 134.7 134.7 134.7 134.7 ... 134.7 134.7 134.7\n    day_of_year  (date) int64 432B 154 155 157 159 160 ... 237 239 240 242 244\nData variables:\n    ndvi         (date, lat, lon) float64 151MB dask.array<chunksize=(1, 100, 100), meta=np.ndarray>\n    scl          (date, lat, lon) float64 151MB dask.array<chunksize=(1, 100, 100), meta=np.ndarray>\nAttributes:\n    spec:           RasterSpec(epsg=4326, bounds=(134.66612907013848, 66.8273...\n    crs:            epsg:4326\n    transform:      | 0.00, 0.00, 134.67|\\n| 0.00,-0.00, 66.85|\\n| 0.00, 0.00...\n    resolution_xy:  (6.612317572720078e-05, 6.372865585874454e-05)","content_type":"text/plain"},"text/html":{"content_type":"text/html","hash":"7f8626d2b2553ee39f33397436b1f6cf","path":"/osdf-cookbook/build/7f8626d2b2553ee39f33397436b1f6cf.html"}}}],"key":"fdhFsSMJxe"}],"key":"KUqEfaE8Mb"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we can look at cool pictures by date","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Wn8UYXA2NU"}],"key":"K7MN9tfv4V"}],"key":"snjcA4ILVF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"s2StackMosaic['ndvi'][1].plot.imshow(vmin=-1.0, vmax=1.0)","key":"vkuh454O6q"},{"type":"output","id":"WPqoqA5KGhrWwxzHK_KNn","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"5dc1528a1c49d4b820e7bd0de2ced956","path":"/osdf-cookbook/build/5dc1528a1c49d4b820e7bd0de2ced956.png"}}}],"key":"f9HuLmmTtM"}],"key":"vlSq1ydy6L"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mask out undesireable pixels in the stack according to the scene classification layer","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iuCKGIVTA7"}],"identifier":"mask-out-undesireable-pixels-in-the-stack-according-to-the-scene-classification-layer","label":"Mask out undesireable pixels in the stack according to the scene classification layer","html_id":"mask-out-undesireable-pixels-in-the-stack-according-to-the-scene-classification-layer","implicit":true,"key":"ggRD5yE1O5"}],"key":"frPl98endB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"s2StackMosaic['scl'][0].plot.imshow(cmap='Set1')","key":"GrNzrOgHIf"},{"type":"output","id":"IBpYJvRt0DVIG7pQ1Ucbd","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"c0be85adf7f95d8573676832310f5450","path":"/osdf-cookbook/build/c0be85adf7f95d8573676832310f5450.png"}}}],"key":"KI90aWQPBs"}],"key":"KOp8XqADT2"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Google ‘sentinel 2 scene classification layer’. You’ll see that 4 and 5 are coded for vegetated and not vegetated. Conservatively, everything else is trash for interpreting NDVI.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"l93S3FWmfH"}],"key":"hAZOlA7VBt"}],"key":"Cwraa6ZLYT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ndviMasked = s2StackMosaic['ndvi'].where(s2StackMosaic['scl'].isin([4, 5]))\n\nndviMasked = ndviMasked.where(ndviMasked >= -1.0)\n\nndviMasked = ndviMasked.where(ndviMasked <= 1.0)\n\nndviMasked[0].plot.imshow(\n    # vmin=-1.0, vmax=1.0\n)","key":"WKbOxKTtl8"},{"type":"output","id":"wDx8pAj6-e_59e7Zpo0aC","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"3bd4e7265ea9abfc09c4b93dacff1ffc","path":"/osdf-cookbook/build/3bd4e7265ea9abfc09c4b93dacff1ffc.png"}}}],"key":"mXmIzsxdmD"}],"key":"VVImIyceGM"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Ah yes, that’s better.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qq7I1NsJ1t"}],"key":"do0AW4XqT8"}],"key":"cJ2rlGdHYa"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\nmeanNDVIDoY = ndviMasked.mean(dim=['lat', 'lon'], skipna=True).to_dataframe(name='mean_ndvi').reset_index()\nmeanNDVIDoY.head()","key":"ZBenKGnb65"},{"type":"output","id":"uABcZ3MY6dLTXXCQ54TCR","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 46.5 s, sys: 5.03 s, total: 51.6 s\nWall time: 28.9 s\n"},{"output_type":"execute_result","execution_count":21,"metadata":{},"data":{"text/plain":{"content":"         date  day_of_year  mean_ndvi\n0  2020-06-02          154   0.540790\n1  2020-06-03          155   0.868504\n2  2020-06-05          157   0.742032\n3  2020-06-07          159   0.665262\n4  2020-06-08          160  -0.370471","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>day_of_year</th>\n      <th>mean_ndvi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2020-06-02</td>\n      <td>154</td>\n      <td>0.540790</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020-06-03</td>\n      <td>155</td>\n      <td>0.868504</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2020-06-05</td>\n      <td>157</td>\n      <td>0.742032</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020-06-07</td>\n      <td>159</td>\n      <td>0.665262</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2020-06-08</td>\n      <td>160</td>\n      <td>-0.370471</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"O7DdP4VpKb"}],"key":"pe9QLgGVp8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"meanNDVIDoY.plot.scatter(x='day_of_year', y='mean_ndvi')","key":"OGE0e7GmVL"},{"type":"output","id":"nidddg4DA74IYk9n7zf3p","data":[{"output_type":"execute_result","execution_count":22,"metadata":{},"data":{"text/plain":{"content":"<Axes: xlabel='day_of_year', ylabel='mean_ndvi'>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"6a1e53a05c229065881e1f89f8c9c8e8","path":"/osdf-cookbook/build/6a1e53a05c229065881e1f89f8c9c8e8.png"}}}],"key":"tjT8XkRJzX"}],"key":"WB6QbEvOzl"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Ok, so now we’re able to detect this somehow automatically. It would be helpful to cross-referencing this against some climate (in this case it’s burned, not climate, which are related but also maybe checking against some fire database or product too).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XNA4ISGu3v"}],"key":"EhU67HoUQy"}],"key":"TnJ15B6p6N"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Do a trendline fit","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"R3sZDNf2sY"}],"identifier":"do-a-trendline-fit","label":"Do a trendline fit","html_id":"do-a-trendline-fit","implicit":true,"key":"LrD3EGWUYL"}],"key":"RRBthi4HZf"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"What if we could visualize the pixelwise trend in greening and browning over a season? Let’s take a linear trend for each pixel’s NDVI across the year (hence why day of year is a useful variable here).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Aiu38a4Q5W"}],"key":"vja7GB6ddT"}],"key":"YpJL3YLzSi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\nfit = ndviMasked.polyfit(dim='day_of_year', deg=1)\nslopes = fit['polyfit_coefficients'].sel(degree=1)\n\nslopes.plot.imshow(\n                cmap='coolwarm_r',\n                vmin=-.01,\n                vmax=.01)\n","key":"hgF81fjGD5"},{"type":"output","id":"_jVmpADSO0LFQ6xEzxq1y","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 59.6 s, sys: 7.1 s, total: 1min 6s\nWall time: 42.2 s\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"3b277faeeee7663544cd0409c027230f","path":"/osdf-cookbook/build/3b277faeeee7663544cd0409c027230f.png"}}}],"key":"l9wWdstyOn"}],"key":"pqRKmXo2Ur"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This is now a great raster to play around with in GIS if you choose. A lot of those red streaks are the flowpaths we’re intersted in (water tracks) so it’s interesting that they got browner over the growing season compared to the intertrack areas which are generally positive (got greener over the growing season).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QReWtHxasE"}],"key":"pluRqEmibg"}],"key":"gCmhaLOV5y"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"What’s Next?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eSqZog5caB"}],"identifier":"whats-next","label":"What’s Next?","html_id":"whats-next","implicit":true,"key":"yuXCfiXZZ0"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the near future, this notebook will:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"s6EEpSvIuk"}],"key":"Kl7lEEuVZN"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Address PelicanFS bottlenecks during reading of cache metadata.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"cGlXIAkp1b"}],"key":"hDtR7M4c9Z"}],"key":"t2pZ6wJSvT"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Use a larger AOI and longer time period to see this anylysis over multiple years.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"KkXA2trRvM"}],"key":"arYLve0Yf1"}],"key":"UBr6dSEhn4"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"With a larger AOI and longer time series, we’ll have more data, wo we’ll experiment with distributed computing with Dask.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ir09IACujT"}],"key":"fHgNBeNH2v"}],"key":"oFNS9DWy6f"}],"key":"exsvnnT10l"}],"key":"BHN06QRD9f"}],"key":"uqVg4MvTwx"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"PyCoGSS: Spectral Change Analysis of Arctic Water Tracks","url":"/notebooks/pycogss-foundations","group":"PYCOGSS examples"},"next":{"title":"Introduction to NSDF-OpenVISUS","url":"/notebooks/introduction-to-nsdf-openvisus","group":"OpenVISUS examples"}}},"domain":"http://localhost:3000"}