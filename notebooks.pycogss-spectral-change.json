{"version":2,"kind":"Notebook","sha256":"c5effcf88365ba3ec6684ed05a02d7dbba22198046774527217a9676acc12731","slug":"notebooks.pycogss-spectral-change","location":"/notebooks/05_pycogss_spectral_change.ipynb","dependencies":[],"frontmatter":{"title":"Use the GeoJSON file to get the Area of Interest and query the STAC catalog for items","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Harsha R. Hampapura","given":"Harsha R.","family":"Hampapura"},"name":"Harsha R. Hampapura","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Brian Bockelman","given":"Brian","family":"Bockelman"},"name":"Brian Bockelman","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Alexander Hoelzeman","given":"Alexander","family":"Hoelzeman"},"name":"Alexander Hoelzeman","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Emma Turetsky","given":"Emma","family":"Turetsky"},"name":"Emma Turetsky","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Amandha Wingert Barok","given":"Amandha Wingert","family":"Barok"},"name":"Amandha Wingert Barok","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Aashish Panta","given":"Aashish","family":"Panta"},"name":"Aashish Panta","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Riley Conroy","given":"Riley","family":"Conroy"},"name":"Riley Conroy","id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Douglas Schuster","given":"Douglas","family":"Schuster"},"name":"Douglas Schuster","id":"contributors-myst-generated-uid-7"},{"nameParsed":{"literal":"Justin Hiemstra","given":"Justin","family":"Hiemstra"},"name":"Justin Hiemstra","id":"contributors-myst-generated-uid-8"},{"nameParsed":{"literal":"Kibiwott Koech","given":"Kibiwott","family":"Koech"},"name":"Kibiwott Koech","id":"contributors-myst-generated-uid-9"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/osdf-cookbook","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/osdf-cookbook/blob/main/notebooks/05_pycogss_spectral_change.ipynb","exports":[{"format":"ipynb","filename":"05_pycogss_spectral_change.ipynb","url":"/osdf-cookbook/build/05_pycogss_spectral_-a0c7fe0ca05a4b620464fdccacfaa72f.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Imports\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nimport re\nfrom pelicanfs.core import PelicanFileSystem, PelicanMap,OSDFFileSystem \nimport geopandas as gpd\nfrom pystac_client import Client\nfrom rasterio.mask import mask\nimport rasterio\nfrom shapely.geometry import box\nfrom urllib.parse import urlparse","key":"N9uLrTjEUC"},{"type":"output","id":"5RRkWVN7K7pc_ROv08vfC","data":[],"key":"vUaBmLFWef"}],"key":"KCoD100eAL"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Use the GeoJSON file to get the Area of Interest and query the STAC catalog for items","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CxNDEtatxW"}],"identifier":"use-the-geojson-file-to-get-the-area-of-interest-and-query-the-stac-catalog-for-items","label":"Use the GeoJSON file to get the Area of Interest and query the STAC catalog for items","html_id":"use-the-geojson-file-to-get-the-area-of-interest-and-query-the-stac-catalog-for-items","implicit":true,"key":"vO9batvXFz"}],"key":"RPYXzWnKd8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Load the GeoJSON file\ngeojson_path = '3100180240.geojson' \ngdf = gpd.read_file(geojson_path)\n\n# Display the loaded GeoDataFrame\nprint(gdf)","key":"Sp05WWmCFD"},{"type":"output","id":"-VdEY1Ck7c5Nu80HkYwLl","data":[{"output_type":"stream","name":"stdout","text":"                     id  SUB_AREA  COAST     PFAF_ID  DIST_MAIN    HYBAS_ID  \\\n0  00140000000000002983     128.1      0  3512704524      784.3  3100180240   \n\n   DIST_SINK   NEXT_DOWN  ORDER  ENDO    MAIN_BAS   NEXT_SINK   SORT  UP_AREA  \\\n0      784.3  3100180230      4     0  3100009670  3100009670  66318    128.1   \n\n                                            geometry  \n0  POLYGON ((134.51667 66.87917, 134.51752 66.875...  \n"}],"key":"mcRX1aLRnL"}],"key":"uW8satQDAW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Extract AOI geometry\naoi_geometry = gdf.geometry.iloc[0]\naoi_bounds   = aoi_geometry.bounds  # (minx, miny, maxx, maxy)\n\n# Get AOI centroid for visualization\ncentroid  = aoi_geometry.centroid\nlong, lat = centroid.x, centroid.y\n\n# Print the bounding box to verify\nprint(\"Bounding Box:\", aoi_bounds)","key":"HjYwzgST3K"},{"type":"output","id":"M-Jihz9ckbMVIiSDOzyeO","data":[{"output_type":"stream","name":"stdout","text":"Bounding Box: (134.51666686838126, 66.7708333115583, 134.9046488751149, 66.97083294070578)\n"}],"key":"eqxv6kQa50"}],"key":"PPbRLkhew7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Connect to the Earth Search STAC API (Sentinel-2 Level-2A COGs are available here)\ncatalog_url = \"https://earth-search.aws.element84.com/v1\"\ncatalog     = Client.open(catalog_url)\n\n# Define the date range as strings\nstart_date      = \"2019-01\"\nend_date        = \"2023-02\"\n\n# Define cloud cover threshold\ncloud_cover_max = 0.05  # 5% cloud cover threshold\n#cloud_cover_max = 0.20  # 20% cloud cover threshold\n\n# Perform the search\nsearch = catalog.search(\n                 collections=[\"sentinel-2-l2a\"],\n                 bbox=aoi_bounds,\n                 datetime=f\"{start_date}/{end_date}\",\n                 #datetime=\"2022-06-01/2022-09-30\",\n                 query={\"eo:cloud_cover\": {\"lt\": cloud_cover_max * 100}}\n                )\n\n# Get all matching items\nitems = list(search.items())\nprint(f\"Found {len(items)} matching items.\")","key":"JrOGUQ9STK"},{"type":"output","id":"Uo8imMlfXY93qZI5WLTc8","data":[{"output_type":"stream","name":"stdout","text":"Found 258 matching items.\n"}],"key":"J327J0ZhgA"}],"key":"iHfpn9pbDb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Confirm that the matching items are hosted in a aws-us-region by printing out the href links for the first n items\nn=1\n\nfor i, item in enumerate(items[:n]):\n    print(f\"\\nItem {i+1}: {item.id}\")\n    for asset_key, asset in item.assets.items():\n        print(f\"  {asset_key}: {asset.href}\")","key":"fpUgiU4YmS"},{"type":"output","id":"5xjQNJZ0qYGjKtKbL2t0t","data":[{"output_type":"stream","name":"stdout","text":"\nItem 1: S2B_53WMQ_20230222_0_L2A\n  aot: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/AOT.tif\n  blue: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B02.tif\n  coastal: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B01.tif\n  granule_metadata: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/granule_metadata.xml\n  green: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B03.tif\n  nir: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B08.tif\n  nir08: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B8A.tif\n  nir09: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B09.tif\n  red: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B04.tif\n  rededge1: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B05.tif\n  rededge2: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B06.tif\n  rededge3: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B07.tif\n  scl: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/SCL.tif\n  swir16: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B11.tif\n  swir22: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/B12.tif\n  thumbnail: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/thumbnail.jpg\n  tileinfo_metadata: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/tileinfo_metadata.json\n  visual: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/TCI.tif\n  wvp: https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/53/W/MQ/2023/2/S2B_53WMQ_20230222_0_L2A/WVP.tif\n  aot-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/AOT.jp2\n  blue-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B02.jp2\n  coastal-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B01.jp2\n  green-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B03.jp2\n  nir-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B08.jp2\n  nir08-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B8A.jp2\n  nir09-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B09.jp2\n  red-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B04.jp2\n  rededge1-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B05.jp2\n  rededge2-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B06.jp2\n  rededge3-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B07.jp2\n  scl-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/SCL.jp2\n  swir16-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B11.jp2\n  swir22-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/B12.jp2\n  visual-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/TCI.jp2\n  wvp-jp2: s3://sentinel-s2-l2a/tiles/53/W/MQ/2023/2/22/0/WVP.jp2\n"}],"key":"vNv3iHA6b7"}],"key":"KteKrNATrS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from shapely.geometry import mapping\n\n# Reproject AOI to match raster CRS\nfrom pyproj import CRS\nfrom geopandas import GeoSeries","key":"MlhEYUEME3"},{"type":"output","id":"A8g-W_v2NjWaae56WQaYJ","data":[],"key":"j3WJaHs5el"}],"key":"jcWV2BGskA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def returnOSDFPath(url):\n    \"\"\"\n    Converts a URL to an OSDF path.\n\n    Parameters:\n    - url: URL to convert.\n\n    Returns:\n    - OSDF path.\n    \"\"\"\n    # Parse the URL\n    parsed_url = urlparse(url)\n    \n    # Construct the OSDF path\n    osdf_path = f\"/aws-opendata/us-west-2/sentinel-cogs{parsed_url.path}\"\n    \n    return osdf_path\n","key":"mWJfeFnZ9h"},{"type":"output","id":"PpXkovSzikSWIE37FIChG","data":[],"key":"fyCKcBaj54"}],"key":"sunIhpCvoE"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Apply various masks and calculate NDVI","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AROpciwBlr"}],"identifier":"apply-various-masks-and-calculate-ndvi","label":"Apply various masks and calculate NDVI","html_id":"apply-various-masks-and-calculate-ndvi","implicit":true,"key":"SkQGDSTzgi"}],"key":"O0JfoIzg5a"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def clp(image_src, aoi_geometry):\n    \"\"\"\n    Clip a raster image to the Area of Interest (AOI).\n\n    Parameters:\n    - image_src: Open rasterio dataset.\n    - aoi_geometry: AOI geometry as a GeoJSON-like object.\n\n    Returns:\n    - Clipped image array and updated metadata.\n    \"\"\"\n    # out_image, out_transform = mask(image_src, [aoi_geometry], crop=True)\n    out_image, out_transform = mask(image_src, aoi_geometry, crop=True)\n    out_meta = image_src.meta.copy()\n    out_meta.update({\n        \"driver\": \"GTiff\",\n        \"height\": out_image.shape[1],\n        \"width\": out_image.shape[2],\n        \"transform\": out_transform\n    })\n    return out_image, out_meta\n\ndef maskWater(image, water_mask):\n    \"\"\"\n    Masks out water pixels using the MODIS water mask.\n\n    Parameters:\n    - image: Raster image to mask.\n    - water_mask: Water mask raster.\n\n    Returns:\n    - Water-masked image.\n    \"\"\"\n    water = water_mask.read(1)  # Read the water mask\n    mask = water < 1  # Mask water pixels (water < 1)\n    image_masked = np.where(mask, image, np.nan)\n    return image_masked\n\ndef maskS2snow(image, snow_prob):\n    \"\"\"\n    Masks snow pixels using the MSK_SNWPRB (Snow Probability Mask).\n\n    Parameters:\n    - image: Raster image to mask.\n    - snow_prob: Snow probability raster.\n\n    Returns:\n    - Snow-masked image.\n    \"\"\"\n    snow = snow_prob.read(1)  # Read the snow probability mask\n    mask = snow < 0.009  # Mask snow pixels (snow probability < 0.9%)\n    image_masked = np.where(mask, image, np.nan)\n    return image_masked\n\ndef maskWhite(image, b2, b3, b4):\n    \"\"\"\n    Masks white pixels by converting RGB to grayscale and applying a threshold.\n\n    Parameters:\n    - image: Raster image to mask.\n    - b2, b3, b4: Blue, Green, and Red bands respectively.\n\n    Returns:\n    - Grayscale-masked image.\n    \"\"\"\n    # Convert RGB to grayscale\n    grayscale = (0.3 * b4.read(1) + 0.59 * b3.read(1) + 0.11 * b2.read(1)) * 1e4\n    mask = grayscale <= 2000  # Mask white pixels (grayscale > 2000)\n    image_masked = np.where(mask, image, np.nan)\n    return image_masked","key":"lsiAlH5hc5"},{"type":"output","id":"Rv9yTq9uTeJtfMbDmPcvY","data":[],"key":"F9wSpIXb1M"}],"key":"N2lSREcTtc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n# # Using pelicanfs\n# Loop through each item in the STAC query\nfor idx, item in enumerate(items, start=1):\n    print(f\"Processing dataset #{idx}\")\n    if idx == 6: # Otherwise \n        break\n\n    # Check required assets\n    required_assets = [\"red\", \"green\", \"blue\", \"scl\"]\n    if not all(asset in item.assets for asset in required_assets):\n        print(f\"Skipping dataset #{idx}: Missing required assets.\")\n        continue\n\n    # Get asset URLs\n    red_url = item.assets[\"red\"].href\n    green_url = item.assets[\"green\"].href\n    blue_url = item.assets[\"blue\"].href\n    scl_url = item.assets[\"scl\"].href\n\n    pel_red_url   = returnOSDFPath(red_url)\n    pel_green_url = returnOSDFPath(green_url)\n    pel_blue_url  = returnOSDFPath(blue_url)\n    pel_scl_url   = returnOSDFPath(scl_url)\n\n    pelfs = PelicanFileSystem(\"pelican://osg-htc.org\")\n\n    # Reproject AOI to match raster CRS\n    with rasterio.open(pel_red_url,opener=pelfs) as src:\n        raster_crs = CRS(src.crs)\n    aoi_geometry_reprojected = GeoSeries(aoi_geometry).set_crs(gdf.crs).to_crs(raster_crs)\n\n    # Reproject AOI to match raster CRS\n    with rasterio.open(pel_red_url, opener=pelfs) as red_src, \\\n         rasterio.open(pel_green_url, opener=pelfs) as green_src, \\\n         rasterio.open(pel_blue_url, opener=pelfs) as blue_src, \\\n         rasterio.open(pel_scl_url, opener=pelfs) as scl_src:\n\n        aoi_geometry_reprojected = GeoSeries(aoi_geometry).set_crs(gdf.crs).to_crs(raster_crs)\n        raster_bounds = box(*red_src.bounds)\n\n        if not aoi_geometry_reprojected[0].intersects(raster_bounds):\n            print(f\"Warning: AOI does not intersect the bounds of {red_url}. Skipping.\")\n            continue\n\n        # Clip all RGB and SCL bands to AOI\n        red_clipped, red_meta = clp(red_src, aoi_geometry_reprojected)\n        green_clipped, _      = clp(green_src, aoi_geometry_reprojected)\n        blue_clipped, _       = clp(blue_src, aoi_geometry_reprojected)\n        scl_clipped, _        = clp(scl_src, aoi_geometry_reprojected)\n\n        print(f\"Dataset #{idx} processed. Ready for visualization or further analysis.\")","key":"h8J5FNnxpr"},{"type":"output","id":"M05y2R94rpGw929znU2n0","data":[{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stdout","text":"Processing dataset #1\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stdout","text":"Dataset #1 processed. Ready for visualization or further analysis.\nProcessing dataset #2\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stdout","text":"Dataset #2 processed. Ready for visualization or further analysis.\nProcessing dataset #3\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Unclosed connection\nclient_connection: Connection<ConnectionKey(host='aws-opendata-uswest-2.svc.osg-htc.org', port=8443, is_ssl=True, ssl=True, proxy=None, proxy_auth=None, proxy_headers_hash=None)>\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stdout","text":"Dataset #3 processed. Ready for visualization or further analysis.\nProcessing dataset #4\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stdout","text":"Dataset #4 processed. Ready for visualization or further analysis.\nProcessing dataset #5\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stderr","text":"Discovery URL pelican://osg-htc.org/ does not match pelican://test/\n"},{"output_type":"stream","name":"stdout","text":"Dataset #5 processed. Ready for visualization or further analysis.\nProcessing dataset #6\nCPU times: user 4.74 s, sys: 639 ms, total: 5.37 s\nWall time: 3min 51s\n"}],"key":"jnZo9MdL1G"}],"key":"t7e5rQiwuV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from sklearn.preprocessing import MinMaxScaler\n# Function to scale image bands properly\ndef scale_band(band):\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    return scaler.fit_transform(band)  # Normalize between 0-1\n\n# Assuming red_clipped, green_clipped, and blue_clipped are 2D NumPy arrays\nrgb = np.dstack((scale_band(red_clipped.squeeze()),\n    scale_band(green_clipped.squeeze()),\n    scale_band(blue_clipped.squeeze()),\n))\n\n# Plot\nplt.figure(figsize=(10, 8))\nplt.imshow(rgb)\nplt.axis(\"off\")\nplt.show()","key":"MSvGwAlTNj"},{"type":"output","id":"Jp3AhGYlYcuYKSYC9eSPh","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 1000x800 with 1 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"ff6290951a21c65850fa9b71dfec0215","path":"/osdf-cookbook/build/ff6290951a21c65850fa9b71dfec0215.png"}}}],"key":"dLjZ18oJAq"}],"key":"eKL2ohuHMS"}],"key":"orUYzd5AvL"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Project Pythia Notebook Template","url":"/notebooks/init-datasets","group":"NOAA SONAR data examples"},"next":{"title":"Project Pythia LLC4320 Ocean Dataset Cookbook","url":"/notebooks/pelican-ocean-llc4320","group":"OpenVISUS examples"}}},"domain":"http://localhost:3000"}